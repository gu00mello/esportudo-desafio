484326164a3957410083414aa8c88e4a
'use strict';

var utils = require('./../utils');

var transformData = require('./transformData');

var isCancel = require('../cancel/isCancel');

var defaults = require('../defaults');

var CanceledError = require('../cancel/CanceledError');

function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new CanceledError();
  }
}

module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = config.headers || {};
  config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });
  var adapter = config.adapter || defaults.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      if (reason && reason.response) {
        reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
      }
    }

    return Promise.reject(reason);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNDYW5jZWwiLCJkZWZhdWx0cyIsIkNhbmNlbGVkRXJyb3IiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwiY29uZmlnIiwiY2FuY2VsVG9rZW4iLCJ0aHJvd0lmUmVxdWVzdGVkIiwic2lnbmFsIiwiYWJvcnRlZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJkaXNwYXRjaFJlcXVlc3QiLCJoZWFkZXJzIiwiZGF0YSIsImNhbGwiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwibWVyZ2UiLCJjb21tb24iLCJtZXRob2QiLCJmb3JFYWNoIiwiY2xlYW5IZWFkZXJDb25maWciLCJhZGFwdGVyIiwidGhlbiIsIm9uQWRhcHRlclJlc29sdXRpb24iLCJyZXNwb25zZSIsInRyYW5zZm9ybVJlc3BvbnNlIiwib25BZGFwdGVyUmVqZWN0aW9uIiwicmVhc29uIiwiUHJvbWlzZSIsInJlamVjdCJdLCJzb3VyY2VzIjpbImRpc3BhdGNoUmVxdWVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgQ2FuY2VsZWRFcnJvciA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qo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