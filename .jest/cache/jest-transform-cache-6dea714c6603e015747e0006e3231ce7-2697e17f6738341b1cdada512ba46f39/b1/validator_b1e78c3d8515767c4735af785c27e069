7e0d907b67735b05ef7d70a32237b590
'use strict';

var VERSION = require('../env/data').version;

var AxiosError = require('../core/AxiosError');

var validators = {};
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function (type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});
var deprecatedWarnings = {};

validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  return function (value, opt, opts) {
    if (validator === false) {
      throw new AxiosError(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')), AxiosError.ERR_DEPRECATED);
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
  }

  var keys = Object.keys(options);
  var i = keys.length;

  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];

    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);

      if (result !== true) {
        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
      }

      continue;
    }

    if (allowUnknown !== true) {
      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWRVJTSU9OIiwicmVxdWlyZSIsInZlcnNpb24iLCJBeGlvc0Vycm9yIiwidmFsaWRhdG9ycyIsImZvckVhY2giLCJ0eXBlIiwiaSIsInZhbGlkYXRvciIsInRoaW5nIiwiZGVwcmVjYXRlZFdhcm5pbmdzIiwidHJhbnNpdGlvbmFsIiwibWVzc2FnZSIsImZvcm1hdE1lc3NhZ2UiLCJvcHQiLCJkZXNjIiwidmFsdWUiLCJvcHRzIiwiRVJSX0RFUFJFQ0FURUQiLCJjb25zb2xlIiwid2FybiIsImFzc2VydE9wdGlvbnMiLCJvcHRpb25zIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwiRVJSX0JBRF9PUFRJT05fVkFMVUUiLCJrZXlzIiwiT2JqZWN0IiwibGVuZ3RoIiwicmVzdWx0IiwidW5kZWZpbmVkIiwiRVJSX0JBRF9PUFRJT04iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidmFsaWRhdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFZFUlNJT04gPSByZXF1aXJlKCcuLi9lbnYvZGF0YScpLnZlcnNpb247XG52YXIgQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvQXhpb3NFcnJvcicpO1xuXG52YXIgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goZnVuY3Rpb24odHlwZSwgaSkge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxudmFyIGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3B0LCBvcHRzKSB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSksXG4gICAgICAgIEF4aW9zRXJyb3IuRVJSX0RFUFJFQ0FURURcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JywgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gIH1cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICB2YXIgb3B0ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT04pO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXNzZXJ0T3B0aW9uczogYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yczogdmFsaWRhdG9yc1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUFQLENBQXVCQyxPQUFyQzs7QUFDQSxJQUFJQyxVQUFVLEdBQUdGLE9BQU8sQ0FBQyxvQkFBRCxDQUF4Qjs7QUFFQSxJQUFJRyxVQUFVLEdBQUcsRUFBakI7QUFHQSxDQUFDLFFBQUQsRUFBVyxTQUFYLEVBQXNCLFFBQXRCLEVBQWdDLFVBQWhDLEVBQTRDLFFBQTVDLEVBQXNELFFBQXRELEVBQWdFQyxPQUFoRSxDQUF3RSxVQUFTQyxJQUFULEVBQWVDLENBQWYsRUFBa0I7RUFDeEZILFVBQVUsQ0FBQ0UsSUFBRCxDQUFWLEdBQW1CLFNBQVNFLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0lBQzNDLE9BQU8sT0FBT0EsS0FBUCxLQUFpQkgsSUFBakIsSUFBeUIsT0FBT0MsQ0FBQyxHQUFHLENBQUosR0FBUSxJQUFSLEdBQWUsR0FBdEIsSUFBNkJELElBQTdEO0VBQ0QsQ0FGRDtBQUdELENBSkQ7QUFNQSxJQUFJSSxrQkFBa0IsR0FBRyxFQUF6Qjs7QUFTQU4sVUFBVSxDQUFDTyxZQUFYLEdBQTBCLFNBQVNB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