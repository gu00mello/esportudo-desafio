77dbfbc97b19bd2f978f1f09181a4fa7
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = exports.TestEnvironment = void 0;

function _vm() {
  var data = require('vm');

  _vm = function _vm() {
    return data;
  };

  return data;
}

function _fakeTimers() {
  var data = require('@jest/fake-timers');

  _fakeTimers = function _fakeTimers() {
    return data;
  };

  return data;
}

function _jestMock() {
  var data = require('jest-mock');

  _jestMock = function _jestMock() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

var denyList = new Set(['GLOBAL', 'root', 'global', 'Buffer', 'ArrayBuffer', 'Uint8Array', 'jest-symbol-do-not-touch']);
var nodeGlobals = new Map(Object.getOwnPropertyNames(globalThis).filter(function (global) {
  return !denyList.has(global);
}).map(function (nodeGlobalsKey) {
  var descriptor = Object.getOwnPropertyDescriptor(globalThis, nodeGlobalsKey);

  if (!descriptor) {
    throw new Error("No property descriptor for " + nodeGlobalsKey + ", this is a bug in Jest.");
  }

  return [nodeGlobalsKey, descriptor];
}));

var NodeEnvironment = function () {
  function NodeEnvironment(config, _context) {
    (0, _classCallCheck2.default)(this, NodeEnvironment);
    this.customExportConditions = ['node', 'node-addons'];
    var projectConfig = config.projectConfig;
    this.context = (0, _vm().createContext)();
    var global = this.global = (0, _vm().runInContext)('this', Object.assign(this.context, projectConfig.testEnvironmentOptions));
    var contextGlobals = new Set(Object.getOwnPropertyNames(global));

    var _loop = function _loop(nodeGlobalsKey, descriptor) {
      if (!contextGlobals.has(nodeGlobalsKey)) {
        Object.defineProperty(global, nodeGlobalsKey, {
          configurable: descriptor.configurable,
          enumerable: descriptor.enumerable,
          get: function get() {
            var val = globalThis[nodeGlobalsKey];
            Object.defineProperty(global, nodeGlobalsKey, {
              configurable: descriptor.configurable,
              enumerable: descriptor.enumerable,
              value: val,
              writable: descriptor.writable
            });
            return val;
          },
          set: function set(val) {
            Object.defineProperty(global, nodeGlobalsKey, {
              configurable: descriptor.configurable,
              enumerable: descriptor.enumerable,
              value: val,
              writable: true
            });
          }
        });
      }
    };

    for (var _ref of nodeGlobals) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2);

      var nodeGlobalsKey = _ref2[0];
      var descriptor = _ref2[1];

      _loop(nodeGlobalsKey, descriptor);
    }

    global.global = global;
    global.Buffer = Buffer;
    global.ArrayBuffer = ArrayBuffer;
    global.Uint8Array = Uint8Array;
    (0, _jestUtil().installCommonGlobals)(global, projectConfig.globals);

    if ('customExportConditions' in projectConfig.testEnvironmentOptions) {
      var customExportConditions = projectConfig.testEnvironmentOptions.customExportConditions;

      if (Array.isArray(customExportConditions) && customExportConditions.every(function (item) {
        return typeof item === 'string';
      })) {
        this.customExportConditions = customExportConditions;
      } else {
        throw new Error('Custom export conditions specified but they are not an array of strings');
      }
    }

    this.moduleMocker = new (_jestMock().ModuleMocker)(global);

    var timerIdToRef = function timerIdToRef(id) {
      return {
        id: id,
        ref: function ref() {
          return this;
        },
        unref: function unref() {
          return this;
        }
      };
    };

    var timerRefToId = function timerRefToId(timer) {
      return timer && timer.id || undefined;
    };

    this.fakeTimers = new (_fakeTimers().LegacyFakeTimers)({
      config: projectConfig,
      global: global,
      moduleMocker: this.moduleMocker,
      timerConfig: {
        idToRef: timerIdToRef,
        refToId: timerRefToId
      }
    });
    this.fakeTimersModern = new (_fakeTimers().ModernFakeTimers)({
      config: projectConfig,
      global: global
    });
  }

  (0, _createClass2.default)(NodeEnvironment, [{
    key: "setup",
    value: function () {
      var _setup = (0, _asyncToGenerator2.default)(function* () {});

      function setup() {
        return _setup.apply(this, arguments);
      }

      return setup;
    }()
  }, {
    key: "teardown",
    value: function () {
      var _teardown = (0, _asyncToGenerator2.default)(function* () {
        if (this.fakeTimers) {
          this.fakeTimers.dispose();
        }

        if (this.fakeTimersModern) {
          this.fakeTimersModern.dispose();
        }

        this.context = null;
        this.fakeTimers = null;
        this.fakeTimersModern = null;
      });

      function teardown() {
        return _teardown.apply(this, arguments);
      }

      return teardown;
    }()
  }, {
    key: "exportConditions",
    value: function exportConditions() {
      return this.customExportConditions;
    }
  }, {
    key: "getVmContext",
    value: function getVmContext() {
      return this.context;
    }
  }]);
  return NodeEnvironment;
}();

exports.default = NodeEnvironment;
var TestEnvironment = NodeEnvironment;
exports.TestEnvironment = TestEnvironment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,