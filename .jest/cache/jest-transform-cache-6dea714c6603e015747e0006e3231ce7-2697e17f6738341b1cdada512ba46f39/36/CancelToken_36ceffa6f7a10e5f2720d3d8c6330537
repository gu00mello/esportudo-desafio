144f69b7a2f5f2793b784a250b0048a8
'use strict';

var CanceledError = require('./CanceledError');

function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });
  var token = this;
  this.promise.then(function (cancel) {
    if (!token._listeners) return;
    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }

    token._listeners = null;
  });

  this.promise.then = function (onfulfilled) {
    var _resolve;

    var promise = new Promise(function (resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      return;
    }

    token.reason = new CanceledError(message);
    resolvePromise(token.reason);
  });
}

CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }

  var index = this._listeners.indexOf(listener);

  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDYW5jZWxlZEVycm9yIiwicmVxdWlyZSIsIkNhbmNlbFRva2VuIiwiZXhlY3V0b3IiLCJUeXBlRXJyb3IiLCJyZXNvbHZlUHJvbWlzZSIsInByb21pc2UiLCJQcm9taXNlIiwicHJvbWlzZUV4ZWN1dG9yIiwicmVzb2x2ZSIsInRva2VuIiwidGhlbiIsImNhbmNlbCIsIl9saXN0ZW5lcnMiLCJpIiwibCIsImxlbmd0aCIsIm9uZnVsZmlsbGVkIiwiX3Jlc29sdmUiLCJzdWJzY3JpYmUiLCJyZWplY3QiLCJ1bnN1YnNjcmliZSIsIm1lc3NhZ2UiLCJyZWFzb24iLCJwcm90b3R5cGUiLCJ0aHJvd0lmUmVxdWVzdGVkIiwibGlzdGVuZXIiLCJwdXNoIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwic291cmNlIiwiYyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJDYW5jZWxUb2tlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWxlZEVycm9yID0gcmVxdWlyZSgnLi9DYW5jZWxlZEVycm9yJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcblxuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbihmdW5jdGlvbihjYW5jZWwpIHtcbiAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgIHZhciBpO1xuICAgIHZhciBsID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgfVxuICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbiA9IGZ1bmN0aW9uKG9uZnVsZmlsbGVkKSB7XG4gICAgdmFyIF9yZXNvbHZlO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsZWRFcnJvcihtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAqL1xuXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gIH1cbn07XG5cbi8qKlxuICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLGFBQWEsR0FBR0MsT0FBTyxDQUFDLGlCQUFELENBQTNCOztBQVFBLFNBQVNDLFdBQVQsQ0FBcUJDLFFBQXJCLEVBQStCO0VBQzdCLElBQUksT0FBT0EsUUFBUCxLQUFvQixVQUF4QixFQUFvQztJQUNsQyxNQUFNLElBQUlDLFNBQUosQ0FBYyw4QkFBZCxDQUFOO0VBQ0Q7O0VBRUQsSUFBSUMsY0FBSjtFQUVBLEtBQUtDLE9BQUwsR0FBZSxJQUFJQyxPQUFKLENBQVksU0FBU0MsZUFBVCxDQUF5QkMsT0FBekIsRUFBa0M7SUFDM0RKLGNBQWMsR0FBR0ksT0FBakI7RUFDRCxDQUZjLENBQWY7RUFJQSxJQUFJQyxLQUFLLEdBQUcsSUFBWjtFQUdBLEtBQUtKLE9BQUwsQ0FBYUssSUFBYixDQUFrQixVQUFTQyxNQUFULEVBQWlCO0lBQ2pDLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxVQUFYLEVBQXVCO0lBRXZCLElBQUlDLENBQUo7SUFDQSxJQUFJQyxDQUFDLEdBQUdMLEtBQUssQ0FBQ0csVUFBTixDQUFpQkcsTUFBekI7O0lBRUEsS0FBS0YsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHQyxDQUFoQixFQUFt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