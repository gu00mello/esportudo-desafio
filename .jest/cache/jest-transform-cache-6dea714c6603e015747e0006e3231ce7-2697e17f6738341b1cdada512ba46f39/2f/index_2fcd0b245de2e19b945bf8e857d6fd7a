a85893743dd3f4e3f6e7587a4bd11604
'use strict';

var utils = require('../utils');

var normalizeHeaderName = require('../helpers/normalizeHeaderName');

var AxiosError = require('../core/AxiosError');

var transitionalDefaults = require('./transitional');

var toFormData = require('../helpers/toFormData');

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;

  if (typeof XMLHttpRequest !== 'undefined') {
    adapter = require('../adapters/xhr');
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    adapter = require('../adapters/http');
  }

  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {
  transitional: transitionalDefaults,
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }

    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }

    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }

    var isObjectPayload = utils.isObject(data);
    var contentType = headers && headers['Content-Type'];
    var isFileList;

    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {
      var _FormData = this.env && this.env.FormData;

      return toFormData(isFileList ? {
        'files[]': data
      } : data, _FormData && new _FormData());
    } else if (isObjectPayload || contentType === 'application/json') {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }

    return data;
  }],
  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }

          throw e;
        }
      }
    }

    return data;
  }],
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: require('./env/FormData')
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};
utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiQXhpb3NFcnJvciIsInRyYW5zaXRpb25hbERlZmF1bHRzIiwidG9Gb3JtRGF0YSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaGVhZGVycyIsInZhbHVlIiwiaXNVbmRlZmluZWQiLCJnZXREZWZhdWx0QWRhcHRlciIsImFkYXB0ZXIiLCJYTUxIdHRwUmVxdWVzdCIsInByb2Nlc3MiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdHJpbmdpZnlTYWZlbHkiLCJyYXdWYWx1ZSIsInBhcnNlciIsImVuY29kZXIiLCJpc1N0cmluZyIsIkpTT04iLCJwYXJzZSIsInRyaW0iLCJlIiwibmFtZSIsInN0cmluZ2lmeSIsImRlZmF1bHRzIiwidHJhbnNpdGlvbmFsIiwidHJhbnNmb3JtUmVxdWVzdCIsImRhdGEiLCJpc0Zvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNTdHJlYW0iLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0FycmF5QnVmZmVyVmlldyIsImJ1ZmZlciIsImlzVVJMU2VhcmNoUGFyYW1zIiwiaXNPYmplY3RQYXlsb2FkIiwiaXNPYmplY3QiLCJjb250ZW50VHlwZSIsImlzRmlsZUxpc3QiLCJfRm9ybURhdGEiLCJlbnYiLCJGb3JtRGF0YSIsInRyYW5zZm9ybVJlc3BvbnNlIiwic2lsZW50SlNPTlBhcnNpbmciLCJmb3JjZWRKU09OUGFyc2luZyIsInN0cmljdEpTT05QYXJzaW5nIiwicmVzcG9uc2VUeXBlIiwibGVuZ3RoIiwiZnJvbSIsIkVSUl9CQURfUkVTUE9OU0UiLCJyZXNwb25zZSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsIm1heEJvZHlMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsImNvbW1vbiIsImZvckVhY2giLCJmb3JFYWNoTWV0aG9kTm9EYXRhIiwibWV0aG9kIiwiZm9yRWFjaE1ldGhvZFdpdGhEYXRhIiwibWVyZ2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZS9BeGlvc0Vycm9yJyk7XG52YXIgdHJhbnNpdGlvbmFsRGVmYXVsdHMgPSByZXF1aXJlKCcuL3RyYW5zaXRpb25hbCcpO1xudmFyIHRvRm9ybURhdGEgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3RvRm9ybURhdGEnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICB2YXIgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMuaXNPYmplY3QoZGF0YSk7XG4gICAgdmFyIGNvbnRlbnRUeXBlID0gaGVhZGVycyAmJiBoZWFkZXJzWydDb250ZW50LVR5cGUnXTtcblxuICAgIHZhciBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgKGlzT2JqZWN0UGF5bG9hZCAmJiBjb250ZW50VHlwZSA9PT0gJ211bHRpcGFydC9mb3JtLWRhdGEnKSkge1xuICAgICAgdmFyIF9Gb3JtRGF0YSA9IHRoaXMuZW52ICYmIHRoaXMuZW52LkZvcm1EYXRhO1xuICAgICAgcmV0dXJuIHRvRm9ybURhdGEoaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSwgX0Zvcm1EYXRhICYmIG5ldyBfRm9ybURhdGEoKSk7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdFBheWxvYWQgfHwgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9qc29uJykge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChzdHJpY3RKU09OUGFyc2luZyB8fCAoZm9yY2VkSlNPTlBhcnNpbmcgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgZGF0YS5sZW5ndGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiByZXF1aXJlKCcuL2Vudi9Gb3JtRGF0YScpXG4gIH0sXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLEtBQUssR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBbkI7O0FBQ0EsSUFBSUMsbUJBQW1CLEdBQUdELE9BQU8sQ0FBQyxnQ0FBRCxDQUFqQzs7QUFDQSxJQUFJRSxVQUFVLEdBQUdGLE9BQU8sQ0FBQyxvQkFB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