cada137a28356ccd8ffe221f36c4c379
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = void 0;

var NativeComponentRegistry = _interopRequireWildcard(require("../NativeComponent/NativeComponentRegistry"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var __INTERNAL_VIEW_CONFIG = {
  uiViewClassName: 'RCTTextInlineImage',
  bubblingEventTypes: {},
  directEventTypes: {},
  validAttributes: {
    resizeMode: true,
    src: true,
    tintColor: {
      process: require('../StyleSheet/processColor')
    },
    headers: true
  }
};
exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
var TextInlineImage = NativeComponentRegistry.get('RCTTextInlineImage', function () {
  return __INTERNAL_VIEW_CONFIG;
});
var _default = TextInlineImage;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX0lOVEVSTkFMX1ZJRVdfQ09ORklHIiwidWlWaWV3Q2xhc3NOYW1lIiwiYnViYmxpbmdFdmVudFR5cGVzIiwiZGlyZWN0RXZlbnRUeXBlcyIsInZhbGlkQXR0cmlidXRlcyIsInJlc2l6ZU1vZGUiLCJzcmMiLCJ0aW50Q29sb3IiLCJwcm9jZXNzIiwicmVxdWlyZSIsImhlYWRlcnMiLCJUZXh0SW5saW5lSW1hZ2UiLCJOYXRpdmVDb21wb25lbnRSZWdpc3RyeSIsImdldCJdLCJzb3VyY2VzIjpbIlRleHRJbmxpbmVJbWFnZU5hdGl2ZUNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEhvc3RDb21wb25lbnQsXG4gIFBhcnRpYWxWaWV3Q29uZmlnLFxufSBmcm9tICcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJy4uL0NvbXBvbmVudHMvVmlldy9WaWV3UHJvcFR5cGVzJztcbmltcG9ydCB0eXBlIHtJbWFnZVJlc2l6ZU1vZGV9IGZyb20gJy4vSW1hZ2VSZXNpemVNb2RlJztcbmltcG9ydCAqIGFzIE5hdGl2ZUNvbXBvbmVudFJlZ2lzdHJ5IGZyb20gJy4uL05hdGl2ZUNvbXBvbmVudC9OYXRpdmVDb21wb25lbnRSZWdpc3RyeSc7XG5pbXBvcnQgdHlwZSB7Q29sb3JWYWx1ZX0gZnJvbSAnLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcblxudHlwZSBOYXRpdmVQcm9wcyA9ICRSZWFkT25seTx7XG4gIC4uLlZpZXdQcm9wcyxcbiAgcmVzaXplTW9kZT86ID9JbWFnZVJlc2l6ZU1vZGUsXG4gIHNyYz86ID8kUmVhZE9ubHlBcnJheTw/JFJlYWRPbmx5PHt1cmk6IHN0cmluZywgLi4ufT4+LFxuICB0aW50Q29sb3I/OiA/Q29sb3JWYWx1ZSxcbiAgaGVhZGVycz86ID97W3N0cmluZ106IHN0cmluZ30sXG59PjtcblxuZXhwb3J0IGNvbnN0IF9fSU5URVJOQUxfVklFV19DT05GSUc6IFBhcnRpYWxWaWV3Q29uZmlnID0ge1xuICB1aVZpZXdDbGFzc05hbWU6ICdSQ1RUZXh0SW5saW5lSW1hZ2UnLFxuICBidWJibGluZ0V2ZW50VHlwZXM6IHt9LFxuICBkaXJlY3RFdmVudFR5cGVzOiB7fSxcbiAgdmFsaWRBdHRyaWJ1dGVzOiB7XG4gICAgcmVzaXplTW9kZTogdHJ1ZSxcbiAgICBzcmM6IHRydWUsXG4gICAgdGludENvbG9yOiB7XG4gICAgICBwcm9jZXNzOiByZXF1aXJlKCcuLi9TdHlsZVNoZWV0L3Byb2Nlc3NDb2xvcicpLFxuICAgIH0sXG4gICAgaGVhZGVyczogdHJ1ZSxcbiAgfSxcbn07XG5cbmNvbnN0IFRleHRJbmxpbmVJbWFnZTogSG9zdENvbXBvbmVudDxOYXRpdmVQcm9wcz4gPVxuICBOYXRpdmVDb21wb25lbnRSZWdpc3RyeS5nZXQ8TmF0aXZlUHJvcHM+KFxuICAgICdSQ1RUZXh0SW5saW5lSW1hZ2UnLFxuICAgICgpID0+IF9fSU5URVJOQUxfVklFV19DT05GSUcsXG4gICk7XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRJbmxpbmVJbWFnZTtcbiJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7QUFRQTs7Ozs7O0FBV08sSUFBTUEsc0JBQXlDLEdBQUc7RUFDdkRDLGVBQWUsRUFBRSxvQkFEc0M7RUFFdkRDLGtCQUFrQixFQUFFLEVBRm1DO0VBR3ZEQyxnQkFBZ0IsRUFBRSxFQUhxQztFQUl2REMsZUFBZSxFQUFFO0lBQ2ZDLFVBQVUsRUFBRSxJQURHO0lBRWZDLEdBQUcsRUFBRSxJQUZVO0lBR2ZDLFNBQVMsRUFBRTtNQUNUQyxPQUFPLEVBQUVDLE9BQU8sQ0FBQyw0QkFBRDtJQURQLENBSEk7SUFNZkMsT0FBTyxFQUFFO0VBTk07QUFKc0MsQ0FBbEQ7O0FBY1AsSUFBTUMsZUFBMkMsR0FDL0NDLHVCQUF1QixDQUFDQyxHQUF4QixDQUNFLG9CQURGLEVBRUU7RUFBQSxPQUFNYixzQkFBTjtBQUFBLENBRkYsQ0FERjtlQU1lVyxlIn0=