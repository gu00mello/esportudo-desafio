{"version":3,"names":["rawAsap","require","freeTasks","module","exports","asap","task","rawTask","length","pop","RawTask","domain","process","prototype","call","enter","threw","exit","requestFlush","push"],"sources":["asap.js"],"sourcesContent":["\"use strict\";\n\nvar rawAsap = require(\"./raw\");\nvar freeTasks = [];\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with\n * priority over IO events. An exception thrown in a task can be handled by\n * `process.on(\"uncaughtException\") or `domain.on(\"error\")`, but will otherwise\n * crash the process. If the error is handled, all subsequent tasks will\n * resume.\n *\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawTask.domain = process.domain;\n    rawAsap(rawTask);\n}\n\nfunction RawTask() {\n    this.task = null;\n    this.domain = null;\n}\n\nRawTask.prototype.call = function () {\n    if (this.domain) {\n        this.domain.enter();\n    }\n    var threw = true;\n    try {\n        this.task.call();\n        threw = false;\n        // If the task throws an exception (presumably) Node.js restores the\n        // domain stack for the next event.\n        if (this.domain) {\n            this.domain.exit();\n        }\n    } finally {\n        // We use try/finally and a threw flag to avoid messing up stack traces\n        // when we catch and release errors.\n        if (threw) {\n            // In Node.js, uncaught exceptions are considered fatal errors.\n            // Re-throw them to interrupt flushing!\n            // Ensure that flushing continues if an uncaught exception is\n            // suppressed listening process.on(\"uncaughtException\") or\n            // domain.on(\"error\").\n            rawAsap.requestFlush();\n        }\n        // If the task threw an error, we do not want to exit the domain here.\n        // Exiting the domain would prevent the domain from catching the error.\n        this.task = null;\n        this.domain = null;\n        freeTasks.push(this);\n    }\n};\n\n"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIC,SAAS,GAAG,EAAhB;AAYAC,MAAM,CAACC,OAAP,GAAiBC,IAAjB;;AACA,SAASA,IAAT,CAAcC,IAAd,EAAoB;EAChB,IAAIC,OAAJ;;EACA,IAAIL,SAAS,CAACM,MAAd,EAAsB;IAClBD,OAAO,GAAGL,SAAS,CAACO,GAAV,EAAV;EACH,CAFD,MAEO;IACHF,OAAO,GAAG,IAAIG,OAAJ,EAAV;EACH;;EACDH,OAAO,CAACD,IAAR,GAAeA,IAAf;EACAC,OAAO,CAACI,MAAR,GAAiBC,OAAO,CAACD,MAAzB;EACAX,OAAO,CAACO,OAAD,CAAP;AACH;;AAED,SAASG,OAAT,GAAmB;EACf,KAAKJ,IAAL,GAAY,IAAZ;EACA,KAAKK,MAAL,GAAc,IAAd;AACH;;AAEDD,OAAO,CAACG,SAAR,CAAkBC,IAAlB,GAAyB,YAAY;EACjC,IAAI,KAAKH,MAAT,EAAiB;IACb,KAAKA,MAAL,CAAYI,KAAZ;EACH;;EACD,IAAIC,KAAK,GAAG,IAAZ;;EACA,IAAI;IACA,KAAKV,IAAL,CAAUQ,IAAV;IACAE,KAAK,GAAG,KAAR;;IAGA,IAAI,KAAKL,MAAT,EAAiB;MACb,KAAKA,MAAL,CAAYM,IAAZ;IACH;EACJ,CARD,SAQU;IAGN,IAAID,KAAJ,EAAW;MAMPhB,OAAO,CAACkB,YAAR;IACH;;IAGD,KAAKZ,IAAL,GAAY,IAAZ;IACA,KAAKK,MAAL,GAAc,IAAd;IACAT,SAAS,CAACiB,IAAV,CAAe,IAAf;EACH;AACJ,CA9BD"}