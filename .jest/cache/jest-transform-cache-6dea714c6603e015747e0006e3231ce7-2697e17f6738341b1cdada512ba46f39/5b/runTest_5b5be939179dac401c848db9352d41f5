b515263fb7ff8f330cee9ebd13f840ef
'use strict';

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault2(require("@babel/runtime/helpers/asyncToGenerator"));

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = runTest;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

function _sourceMapSupport() {
  var data = _interopRequireDefault(require('source-map-support'));

  _sourceMapSupport = function _sourceMapSupport() {
    return data;
  };

  return data;
}

function _console() {
  var data = require('@jest/console');

  _console = function _console() {
    return data;
  };

  return data;
}

function _transform() {
  var data = require('@jest/transform');

  _transform = function _transform() {
    return data;
  };

  return data;
}

function docblock() {
  var data = _interopRequireWildcard(require('jest-docblock'));

  docblock = function docblock() {
    return data;
  };

  return data;
}

function _jestLeakDetector() {
  var data = _interopRequireDefault(require('jest-leak-detector'));

  _jestLeakDetector = function _jestLeakDetector() {
    return data;
  };

  return data;
}

function _jestMessageUtil() {
  var data = require('jest-message-util');

  _jestMessageUtil = function _jestMessageUtil() {
    return data;
  };

  return data;
}

function _jestResolve() {
  var data = require('jest-resolve');

  _jestResolve = function _jestResolve() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function freezeConsole(testConsole, config) {
  testConsole._log = function fakeConsolePush(_type, message) {
    var error = new (_jestUtil().ErrorWithStack)(_chalk().default.red(_chalk().default.bold('Cannot log after tests are done.') + " Did you forget to wait for something async in your test?") + "\nAttempted to log \"" + message + "\".", fakeConsolePush);
    var formattedError = (0, _jestMessageUtil().formatExecError)(error, config, {
      noStackTrace: false
    }, undefined, true);
    process.stderr.write("\n" + formattedError + "\n");
    process.exitCode = 1;
  };
}

function runTestInternal(_x, _x2, _x3, _x4, _x5, _x6) {
  return _runTestInternal.apply(this, arguments);
}

function _runTestInternal() {
  _runTestInternal = (0, _asyncToGenerator2.default)(function* (path, globalConfig, projectConfig, resolver, context, sendMessageToJest) {
    var testSource = fs().readFileSync(path, 'utf8');
    var docblockPragmas = docblock().parse(docblock().extract(testSource));
    var customEnvironment = docblockPragmas['jest-environment'];
    var testEnvironment = projectConfig.testEnvironment;

    if (customEnvironment) {
      if (Array.isArray(customEnvironment)) {
        throw new Error("You can only define a single test environment through docblocks, got \"" + customEnvironment.join(', ') + "\"");
      }

      testEnvironment = (0, _jestResolve().resolveTestEnvironment)(Object.assign({}, projectConfig, {
        requireResolveFunction: require.resolve,
        testEnvironment: customEnvironment
      }));
    }

    var cacheFS = new Map([[path, testSource]]);
    var transformer = yield (0, _transform().createScriptTransformer)(projectConfig, cacheFS);
    var TestEnvironment = yield transformer.requireAndTranspileModule(testEnvironment);
    var testFramework = yield transformer.requireAndTranspileModule(undefined === '1' ? require.resolve('jest-jasmine2') : projectConfig.testRunner);
    var Runtime = (0, _jestUtil().interopRequireDefault)(projectConfig.runtime ? require(projectConfig.runtime) : require('jest-runtime')).default;
    var consoleOut = globalConfig.useStderr ? process.stderr : process.stdout;

    var consoleFormatter = function consoleFormatter(type, message) {
      return (0, _console().getConsoleOutput)(_console().BufferedConsole.write([], type, message, 4), projectConfig, globalConfig);
    };

    var testConsole;

    if (globalConfig.silent) {
      testConsole = new (_console().NullConsole)(consoleOut, consoleOut, consoleFormatter);
    } else if (globalConfig.verbose) {
      testConsole = new (_console().CustomConsole)(consoleOut, consoleOut, consoleFormatter);
    } else {
      testConsole = new (_console().BufferedConsole)();
    }

    var extraTestEnvironmentOptions;
    var docblockEnvironmentOptions = docblockPragmas['jest-environment-options'];

    if (typeof docblockEnvironmentOptions === 'string') {
      extraTestEnvironmentOptions = JSON.parse(docblockEnvironmentOptions);
    }

    var environment = new TestEnvironment({
      globalConfig: globalConfig,
      projectConfig: extraTestEnvironmentOptions ? Object.assign({}, projectConfig, {
        testEnvironmentOptions: Object.assign({}, projectConfig.testEnvironmentOptions, extraTestEnvironmentOptions)
      }) : projectConfig
    }, {
      console: testConsole,
      docblockPragmas: docblockPragmas,
      testPath: path
    });

    if (typeof environment.getVmContext !== 'function') {
      console.error("Test environment found at \"" + testEnvironment + "\" does not export a \"getVmContext\" method, which is mandatory from Jest 27. This method is a replacement for \"runScript\".");
      process.exit(1);
    }

    var leakDetector = projectConfig.detectLeaks ? new (_jestLeakDetector().default)(environment) : null;
    (0, _jestUtil().setGlobal)(environment.global, 'console', testConsole);
    var runtime = new Runtime(projectConfig, environment, resolver, transformer, cacheFS, {
      changedFiles: context.changedFiles,
      collectCoverage: globalConfig.collectCoverage,
      collectCoverageFrom: globalConfig.collectCoverageFrom,
      collectCoverageOnlyFrom: globalConfig.collectCoverageOnlyFrom,
      coverageProvider: globalConfig.coverageProvider,
      sourcesRelatedToTestsInChangedFiles: context.sourcesRelatedToTestsInChangedFiles
    }, path);
    var start = Date.now();

    for (var _path of projectConfig.setupFiles) {
      var esm = runtime.unstable_shouldLoadAsEsm(_path);

      if (esm) {
        yield runtime.unstable_importModule(_path);
      } else {
        var setupFile = runtime.requireModule(_path);

        if (typeof setupFile === 'function') {
          yield setupFile();
        }
      }
    }

    var sourcemapOptions = {
      environment: 'node',
      handleUncaughtExceptions: false,
      retrieveSourceMap: function retrieveSourceMap(source) {
        var _runtime$getSourceMap;

        var sourceMapSource = (_runtime$getSourceMap = runtime.getSourceMaps()) === null || _runtime$getSourceMap === void 0 ? void 0 : _runtime$getSourceMap.get(source);

        if (sourceMapSource) {
          try {
            return {
              map: JSON.parse(fs().readFileSync(sourceMapSource, 'utf8')),
              url: source
            };
          } catch (_unused) {}
        }

        return null;
      }
    };
    runtime.requireInternalModule(require.resolve('source-map-support')).install(sourcemapOptions);

    _sourceMapSupport().default.install(sourcemapOptions);

    if (environment.global && environment.global.process && environment.global.process.exit) {
      var realExit = environment.global.process.exit;

      environment.global.process.exit = function exit() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var error = new (_jestUtil().ErrorWithStack)("process.exit called with \"" + args.join(', ') + "\"", exit);
        var formattedError = (0, _jestMessageUtil().formatExecError)(error, projectConfig, {
          noStackTrace: false
        }, undefined, true);
        process.stderr.write(formattedError);
        return realExit.apply(void 0, args);
      };
    }

    var collectV8Coverage = globalConfig.coverageProvider === 'v8' && typeof environment.getVmContext === 'function';

    try {
      yield environment.setup();
      var result;

      try {
        if (collectV8Coverage) {
          yield runtime.collectV8Coverage();
        }

        result = yield testFramework(globalConfig, projectConfig, environment, runtime, path, sendMessageToJest);
      } catch (err) {
        err.stack;
        throw err;
      } finally {
        if (collectV8Coverage) {
          yield runtime.stopCollectingV8Coverage();
        }
      }

      freezeConsole(testConsole, projectConfig);
      var testCount = result.numPassingTests + result.numFailingTests + result.numPendingTests + result.numTodoTests;
      var end = Date.now();
      var testRuntime = end - start;
      result.perfStats = {
        end: end,
        runtime: testRuntime,
        slow: testRuntime / 1000 > projectConfig.slowTestThreshold,
        start: start
      };
      result.testFilePath = path;
      result.console = testConsole.getBuffer();
      result.skipped = testCount === result.numPendingTests;
      result.displayName = projectConfig.displayName;
      var coverage = runtime.getAllCoverageInfoCopy();

      if (coverage) {
        var coverageKeys = Object.keys(coverage);

        if (coverageKeys.length) {
          result.coverage = coverage;
        }
      }

      if (collectV8Coverage) {
        var v8Coverage = runtime.getAllV8CoverageInfoCopy();

        if (v8Coverage && v8Coverage.length > 0) {
          result.v8Coverage = v8Coverage;
        }
      }

      if (globalConfig.logHeapUsage) {
        var _globalThis$gc;

        (_globalThis$gc = globalThis.gc) === null || _globalThis$gc === void 0 ? void 0 : _globalThis$gc.call(globalThis);
        result.memoryUsage = process.memoryUsage().heapUsed;
      }

      return new Promise(function (resolve) {
        setImmediate(function () {
          return resolve({
            leakDetector: leakDetector,
            result: result
          });
        });
      });
    } finally {
      runtime.teardown();
      yield environment.teardown();

      _sourceMapSupport().default.resetRetrieveHandlers();
    }
  });
  return _runTestInternal.apply(this, arguments);
}

function runTest(_x7, _x8, _x9, _x10, _x11, _x12) {
  return _runTest.apply(this, arguments);
}

function _runTest() {
  _runTest = (0, _asyncToGenerator2.default)(function* (path, globalConfig, config, resolver, context, sendMessageToJest) {
    var _yield$runTestInterna = yield runTestInternal(path, globalConfig, config, resolver, context, sendMessageToJest),
        leakDetector = _yield$runTestInterna.leakDetector,
        result = _yield$runTestInterna.result;

    if (leakDetector) {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
      result.leaks = yield leakDetector.isLeaking();
    } else {
      result.leaks = false;
    }

    return result;
  });
  return _runTest.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,