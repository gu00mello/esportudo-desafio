b05f28c19ee0e2a8c8c9f62a63516b6d
var iterate = require('./lib/iterate.js'),
    initState = require('./lib/state.js'),
    terminator = require('./lib/terminator.js');

module.exports = parallel;

function parallel(list, iterator, callback) {
  var state = initState(list);

  while (state.index < (state['keyedList'] || list).length) {
    iterate(list, iterator, state, function (error, result) {
      if (error) {
        callback(error, result);
        return;
      }

      if (Object.keys(state.jobs).length === 0) {
        callback(null, state.results);
        return;
      }
    });
    state.index++;
  }

  return terminator.bind(state, callback);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpdGVyYXRlIiwicmVxdWlyZSIsImluaXRTdGF0ZSIsInRlcm1pbmF0b3IiLCJtb2R1bGUiLCJleHBvcnRzIiwicGFyYWxsZWwiLCJsaXN0IiwiaXRlcmF0b3IiLCJjYWxsYmFjayIsInN0YXRlIiwiaW5kZXgiLCJsZW5ndGgiLCJlcnJvciIsInJlc3VsdCIsIk9iamVjdCIsImtleXMiLCJqb2JzIiwicmVzdWx0cyIsImJpbmQiXSwic291cmNlcyI6WyJwYXJhbGxlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXRlcmF0ZSAgICA9IHJlcXVpcmUoJy4vbGliL2l0ZXJhdGUuanMnKVxuICAsIGluaXRTdGF0ZSAgPSByZXF1aXJlKCcuL2xpYi9zdGF0ZS5qcycpXG4gICwgdGVybWluYXRvciA9IHJlcXVpcmUoJy4vbGliL3Rlcm1pbmF0b3IuanMnKVxuICA7XG5cbi8vIFB1YmxpYyBBUElcbm1vZHVsZS5leHBvcnRzID0gcGFyYWxsZWw7XG5cbi8qKlxuICogUnVucyBpdGVyYXRvciBvdmVyIHByb3ZpZGVkIGFycmF5IGVsZW1lbnRzIGluIHBhcmFsbGVsXG4gKlxuICogQHBhcmFtICAge2FycmF5fG9iamVjdH0gbGlzdCAtIGFycmF5IG9yIG9iamVjdCAobmFtZWQgbGlzdCkgdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGl0ZXJhdG9yIC0gaXRlcmF0b3IgdG8gcnVuXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gaW52b2tlZCB3aGVuIGFsbCBlbGVtZW50cyBwcm9jZXNzZWRcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn0gLSBqb2JzIHRlcm1pbmF0b3JcbiAqL1xuZnVuY3Rpb24gcGFyYWxsZWwobGlzdCwgaXRlcmF0b3IsIGNhbGxiYWNrKVxue1xuICB2YXIgc3RhdGUgPSBpbml0U3RhdGUobGlzdCk7XG5cbiAgd2hpbGUgKHN0YXRlLmluZGV4IDwgKHN0YXRlWydrZXllZExpc3QnXSB8fCBsaXN0KS5sZW5ndGgpXG4gIHtcbiAgICBpdGVyYXRlKGxpc3QsIGl0ZXJhdG9yLCBzdGF0ZSwgZnVuY3Rpb24oZXJyb3IsIHJlc3VsdClcbiAgICB7XG4gICAgICBpZiAoZXJyb3IpXG4gICAgICB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCByZXN1bHQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGxvb2tzIGxpa2UgaXQncyB0aGUgbGFzdCBvbmVcbiAgICAgIGlmIChPYmplY3Qua2V5cyhzdGF0ZS5qb2JzKS5sZW5ndGggPT09IDApXG4gICAgICB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHN0YXRlLnJlc3VsdHMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGF0ZS5pbmRleCsrO1xuICB9XG5cbiAgcmV0dXJuIHRlcm1pbmF0b3IuYmluZChzdGF0ZSwgY2FsbGJhY2spO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxPQUFPLEdBQU1DLE9BQU8sQ0FBQyxrQkFBRCxDQUF4QjtBQUFBLElBQ0lDLFNBQVMsR0FBSUQsT0FBTyxDQUFDLGdCQUFELENBRHhCO0FBQUEsSUFFSUUsVUFBVSxHQUFHRixPQUFPLENBQUMscUJBQUQsQ0FGeEI7O0FBTUFHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkMsUUFBakI7O0FBVUEsU0FBU0EsUUFBVCxDQUFrQkMsSUFBbEIsRUFBd0JDLFFBQXhCLEVBQWtDQyxRQUFsQyxFQUNBO0VBQ0UsSUFBSUMsS0FBSyxHQUFHUixTQUFTLENBQUNLLElBQUQsQ0FBckI7O0VBRUEsT0FBT0csS0FBSyxDQUFDQyxLQUFOLEdBQWMsQ0FBQ0QsS0FBSyxDQUFDLFdBQUQsQ0FBTCxJQUFzQkgsSUFBdkIsRUFBNkJLLE1BQWxELEVBQ0E7SUFDRVosT0FBTyxDQUFDTyxJQUFELEVBQU9DLFFBQVAsRUFBaUJFLEtBQWpCLEVBQXdCLFVBQVNHLEtBQVQsRUFBZ0JDLE1BQWhCLEVBQy9CO01BQ0UsSUFBSUQsS0FBSixFQUNBO1FBQ0VKLFFBQVEsQ0FBQ0ksS0FBRCxFQUFRQyxNQUFSLENBQVI7UUFDQTtNQUNEOztNQUdELElBQUlDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTixLQUFLLENBQUNPLElBQWxCLEVBQXdCTCxNQUF4QixLQUFtQyxDQUF2QyxFQUNBO1FBQ0VILFFBQVEsQ0FBQyxJQUFELEVBQU9DLEtBQUssQ0FBQ1EsT0FBYixDQUFSO1FBQ0E7TUFDRDtJQUNGLENBZE0sQ0FBUDtJQWdCQVIsS0FBSyxDQUFDQyxLQUFOO0VBQ0Q7O0VBRUQsT0FBT1IsVUFBVSxDQUFDZ0IsSUFBWCxDQUFnQlQsS0FBaEIsRUFBdUJELFFBQXZCLENBQVA7QUFDRCJ9