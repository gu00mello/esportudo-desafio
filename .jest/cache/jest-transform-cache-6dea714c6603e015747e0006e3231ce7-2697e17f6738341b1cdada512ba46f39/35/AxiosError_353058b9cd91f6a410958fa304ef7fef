ba48961607f8c8ea8987296fedd12ebc
'use strict';

var utils = require('../utils');

function AxiosError(message, code, config, request, response) {
  Error.call(this);
  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}

utils.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      message: this.message,
      name: this.name,
      description: this.description,
      number: this.number,
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
['ERR_BAD_OPTION_VALUE', 'ERR_BAD_OPTION', 'ECONNABORTED', 'ETIMEDOUT', 'ERR_NETWORK', 'ERR_FR_TOO_MANY_REDIRECTS', 'ERR_DEPRECATED', 'ERR_BAD_RESPONSE', 'ERR_BAD_REQUEST', 'ERR_CANCELED'].forEach(function (code) {
  descriptors[code] = {
    value: code
  };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, 'isAxiosError', {
  value: true
});

AxiosError.from = function (error, code, config, request, response, customProps) {
  var axiosError = Object.create(prototype);
  utils.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};

module.exports = AxiosError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJBeGlvc0Vycm9yIiwibWVzc2FnZSIsImNvZGUiLCJjb25maWciLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJFcnJvciIsImNhbGwiLCJuYW1lIiwiaW5oZXJpdHMiLCJ0b0pTT04iLCJkZXNjcmlwdGlvbiIsIm51bWJlciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsInN0YWNrIiwic3RhdHVzIiwicHJvdG90eXBlIiwiZGVzY3JpcHRvcnMiLCJmb3JFYWNoIiwidmFsdWUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJmcm9tIiwiZXJyb3IiLCJjdXN0b21Qcm9wcyIsImF4aW9zRXJyb3IiLCJjcmVhdGUiLCJ0b0ZsYXRPYmplY3QiLCJmaWx0ZXIiLCJvYmoiLCJhc3NpZ24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQXhpb3NFcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIEF4aW9zRXJyb3IobWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBFcnJvci5jYWxsKHRoaXMpO1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIHJlc3BvbnNlICYmICh0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2UpO1xufVxuXG51dGlscy5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH1cbn0pO1xuXG52YXIgcHJvdG90eXBlID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG52YXIgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCdcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5dLmZvckVhY2goZnVuY3Rpb24oY29kZSkge1xuICBkZXNjcmlwdG9yc1tjb2RlXSA9IHt2YWx1ZTogY29kZX07XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXhpb3NFcnJvciwgZGVzY3JpcHRvcnMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ2lzQXhpb3NFcnJvcicsIHt2YWx1ZTogdHJ1ZX0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuQXhpb3NFcnJvci5mcm9tID0gZnVuY3Rpb24oZXJyb3IsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UsIGN1c3RvbVByb3BzKSB7XG4gIHZhciBheGlvc0Vycm9yID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuXG4gIHV0aWxzLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zRXJyb3I7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLEtBQUssR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBbkI7O0FBWUEsU0FBU0MsVUFBVCxDQUFvQkMsT0FBcEIsRUFBNkJDLElBQTdCLEVBQW1DQyxNQUFuQyxFQUEyQ0MsT0FBM0MsRUFBb0RDLFFBQXBELEVBQThEO0VBQzVEQyxLQUFLLENBQUNDLElBQU4sQ0FBVyxJQUFYO0VBQ0EsS0FBS04sT0FBTCxHQUFlQSxPQUFmO0VBQ0EsS0FBS08sSUFBTCxHQUFZLFlBQVo7RUFDQU4sSUFBSSxLQUFLLEtBQUtBLElBQUwsR0FBWUEsSUFBakIsQ0FBSjtFQUNBQyxNQUFNLEtBQUssS0FBS0EsTUFBTCxHQUFjQSxNQUFuQixDQUFOO0VBQ0FDLE9BQU8sS0FBSyxLQUFLQSxPQUFMLEdBQWVBLE9BQXBCLENBQVA7RUFDQUMsUUFBUSxLQUFLLEtBQUtBLFFBQUwsR0FBZ0JBLFFBQXJCLENBQVI7QUFDRDs7QUFFRFAsS0FBSyxDQUFDVyxRQUFOLENBQWVULFVBQWYsRUFBMkJNLEtBQTNCLEVBQWtDO0VBQ2hDSSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxHQUFrQjtJQUN4QixPQUFPO01BRUxULE9BQU8sRUFBRSxLQUFLQSxPQUZUO01BR0xPLElBQUksRUFBRSxLQUFLQSxJQUhOO01BS0xHLFdBQVcsRUFBRSxLQUFLQSxXQUxiO01BTUxDLE1BQU0sRUFBRSxLQUFLQSxNQU5SO01BUUxDLFFBQVEsRUFBRSxLQUFLQSxRQVJWO01BU0xDLFVBQVUsRUFBRSxLQUFLQSxVQVRaO01BVUxDLFlBQVksRUFBRSxLQUFLQSxZQVZkO01BV0xDLEtBQUssRUFBRSxLQUFLQSxLQVhQO01BYUxiLE1BQU0sRUFBRSxLQUFLQSxNQWJSO01BY0xELElBQUksRUFBRSxLQUFLQSxJQWROO01BZUxlLE1BQU0sRUFBRSxLQUFLWixRQUFMLElBQWlCLEtBQUtBLFFBQUwsQ0FBY1ksTUFBL0IsR0FBd0MsS0FBS1osUUFBTCxDQUFjWSxNQUF0RCxHQUErRDtJQWZsRSxDQUFQO0VBaUJEO0FBbkIrQixDQUFsQztBQXNCQSxJQUFJQyxTQUFTLEdBQUdsQixVQUFVLENBQUNrQixTQUEzQjtBQUNBLElBQUlDLFdBQVcsR0FBRyxFQUFsQjtBQUVBLENBQ0Usc0JBREYsRUFFRSxnQkFGRixFQUdFLGNBSEYsRUFJRSxXQUpGLEVBS0UsYUFMRixFQU1FLDJCQU5GLEVBT0UsZ0JBUEYsRUFRRSxrQkFSRixFQVNFLGlCQVRGLEVBVUUsY0FWRixFQVlFQyxPQVpGLENBWVUsVUFBU2xCLElBQVQsRUFBZTtFQUN2QmlCLFdBQVcsQ0FBQ2pCLElBQUQsQ0FBWCxHQUFvQjtJQUFDbUIsS0FBSyxFQUFFbkI7RUFBUixDQUFwQjtBQUNELENBZEQ7QUFnQkFvQixNQUFNLENBQUNDLGdCQUFQLENBQXdCdkIsVUFBeEIsRUFBb0NtQixXQUFwQztBQUNBRyxNQUFNLENBQUNFLGNBQVAsQ0FBc0JOLFNBQXRCLEVBQWlDLGNBQWpDLEVBQWlEO0VBQUNHLEtBQUssRUFBRTtBQUFSLENBQWpEOztBQUdBckIsVUFBVSxDQUFDeUIsSUFBWCxHQUFrQixVQUFTQyxLQUFULEVBQWdCeEIsSUFBaEIsRUFBc0JDLE1BQXRCLEVBQThCQyxPQUE5QixFQUF1Q0MsUUFBdkMsRUFBaURzQixXQUFqRCxFQUE4RDtFQUM5RSxJQUFJQyxVQUFVLEdBQUdOLE1BQU0sQ0FBQ08sTUFBUCxDQUFjWCxTQUFkLENBQWpCO0VBRUFwQixLQUFLLENBQUNnQyxZQUFOLENBQW1CSixLQUFuQixFQUEwQkUsVUFBMUIsRUFBc0MsU0FBU0csTUFBVCxDQUFnQkMsR0FBaEIsRUFBcUI7SUFDekQsT0FBT0EsR0FBRyxLQUFLMUIsS0FBSyxDQUFDWSxTQUFyQjtFQUNELENBRkQ7RUFJQWxCLFVBQVUsQ0FBQ08sSUFBWCxDQUFnQnFCLFVBQWhCLEVBQTRCRixLQUFLLENBQUN6QixPQUFsQyxFQUEyQ0MsSUFBM0MsRUFBaURDLE1BQWpELEVBQXlEQyxPQUF6RCxFQUFrRUMsUUFBbEU7RUFFQXVCLFVBQVUsQ0FBQ3BCLElBQVgsR0FBa0JrQixLQUFLLENBQUNsQixJQUF4QjtFQUVBbUIsV0FBVyxJQUFJTCxNQUFNLENBQUNXLE1BQVAsQ0FBY0wsVUFBZCxFQUEwQkQsV0FBMUIsQ0FBZjtFQUVBLE9BQU9DLFVBQVA7QUFDRCxDQWREOztBQWdCQU0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCbkMsVUFBakIifQ==