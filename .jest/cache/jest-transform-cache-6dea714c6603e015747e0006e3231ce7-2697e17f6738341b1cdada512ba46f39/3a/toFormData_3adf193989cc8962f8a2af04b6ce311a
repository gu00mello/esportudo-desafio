1d398678e0d8cb3fbf7391a07d5bedbb
'use strict';

var utils = require('../utils');

function toFormData(obj, formData) {
  formData = formData || new FormData();
  var stack = [];

  function convertValue(value) {
    if (value === null) return '';

    if (utils.isDate(value)) {
      return value.toISOString();
    }

    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
      return typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  function build(data, parentKey) {
    if (utils.isPlainObject(data) || utils.isArray(data)) {
      if (stack.indexOf(data) !== -1) {
        throw Error('Circular reference detected in ' + parentKey);
      }

      stack.push(data);
      utils.forEach(data, function each(value, key) {
        if (utils.isUndefined(value)) return;
        var fullKey = parentKey ? parentKey + '.' + key : key;
        var arr;

        if (value && !parentKey && typeof value === 'object') {
          if (utils.endsWith(key, '{}')) {
            value = JSON.stringify(value);
          } else if (utils.endsWith(key, '[]') && (arr = utils.toArray(value))) {
            arr.forEach(function (el) {
              !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
            });
            return;
          }
        }

        build(value, fullKey);
      });
      stack.pop();
    } else {
      formData.append(parentKey, convertValue(data));
    }
  }

  build(obj);
  return formData;
}

module.exports = toFormData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJ0b0Zvcm1EYXRhIiwib2JqIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsInN0YWNrIiwiY29udmVydFZhbHVlIiwidmFsdWUiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImlzQXJyYXlCdWZmZXIiLCJpc1R5cGVkQXJyYXkiLCJCbG9iIiwiQnVmZmVyIiwiZnJvbSIsImJ1aWxkIiwiZGF0YSIsInBhcmVudEtleSIsImlzUGxhaW5PYmplY3QiLCJpc0FycmF5IiwiaW5kZXhPZiIsIkVycm9yIiwicHVzaCIsImZvckVhY2giLCJlYWNoIiwia2V5IiwiaXNVbmRlZmluZWQiLCJmdWxsS2V5IiwiYXJyIiwiZW5kc1dpdGgiLCJKU09OIiwic3RyaW5naWZ5IiwidG9BcnJheSIsImVsIiwiYXBwZW5kIiwicG9wIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInRvRm9ybURhdGEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHs/T2JqZWN0fSBbZm9ybURhdGFdXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICoqL1xuXG5mdW5jdGlvbiB0b0Zvcm1EYXRhKG9iaiwgZm9ybURhdGEpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IEZvcm1EYXRhKCk7XG5cbiAgdmFyIHN0YWNrID0gW107XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkKGRhdGEsIHBhcmVudEtleSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KGRhdGEpIHx8IHV0aWxzLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgIGlmIChzdGFjay5pbmRleE9mKGRhdGEpICE9PSAtMSkge1xuICAgICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXJlbnRLZXkpO1xuICAgICAgfVxuXG4gICAgICBzdGFjay5wdXNoKGRhdGEpO1xuXG4gICAgICB1dGlscy5mb3JFYWNoKGRhdGEsIGZ1bmN0aW9uIGVhY2godmFsdWUsIGtleSkge1xuICAgICAgICBpZiAodXRpbHMuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG4gICAgICAgIHZhciBmdWxsS2V5ID0gcGFyZW50S2V5ID8gcGFyZW50S2V5ICsgJy4nICsga2V5IDoga2V5O1xuICAgICAgICB2YXIgYXJyO1xuXG4gICAgICAgIGlmICh2YWx1ZSAmJiAhcGFyZW50S2V5ICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmVuZHNXaXRoKGtleSwgJ1tdJykgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICF1dGlscy5pc1VuZGVmaW5lZChlbCkgJiYgZm9ybURhdGEuYXBwZW5kKGZ1bGxLZXksIGNvbnZlcnRWYWx1ZShlbCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnVpbGQodmFsdWUsIGZ1bGxLZXkpO1xuICAgICAgfSk7XG5cbiAgICAgIHN0YWNrLnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQocGFyZW50S2V5LCBjb252ZXJ0VmFsdWUoZGF0YSkpO1xuICAgIH1cbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvRm9ybURhdGE7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLEtBQUssR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBbkI7O0FBU0EsU0FBU0MsVUFBVCxDQUFvQkMsR0FBcEIsRUFBeUJDLFFBQXpCLEVBQW1DO0VBRWpDQSxRQUFRLEdBQUdBLFFBQVEsSUFBSSxJQUFJQyxRQUFKLEVBQXZCO0VBRUEsSUFBSUMsS0FBSyxHQUFHLEVBQVo7O0VBRUEsU0FBU0MsWUFBVCxDQUFzQkMsS0FBdEIsRUFBNkI7SUFDM0IsSUFBSUEsS0FBSyxLQUFLLElBQWQsRUFBb0IsT0FBTyxFQUFQOztJQUVwQixJQUFJUixLQUFLLENBQUNTLE1BQU4sQ0FBYUQsS0FBYixDQUFKLEVBQXlCO01BQ3ZCLE9BQU9BLEtBQUssQ0FBQ0UsV0FBTixFQUFQO0lBQ0Q7O0lBRUQsSUFBSVYsS0FBSyxDQUFDVyxhQUFOLENBQW9CSCxLQUFwQixLQUE4QlIsS0FBSyxDQUFDWSxZQUFOLENBQW1CSixLQUFuQixDQUFsQyxFQUE2RDtNQUMzRCxPQUFPLE9BQU9LLElBQVAsS0FBZ0IsVUFBaEIsR0FBNkIsSUFBSUEsSUFBSixDQUFTLENBQUNMLEtBQUQsQ0FBVCxDQUE3QixHQUFpRE0sTUFBTSxDQUFDQyxJQUFQLENBQVlQLEtBQVosQ0FBeEQ7SUFDRDs7SUFFRCxPQUFPQSxLQUFQO0VBQ0Q7O0VBRUQsU0FBU1EsS0FBVCxDQUFlQyxJQUFmLEVBQXFCQyxTQUFyQixFQUFnQztJQUM5QixJQUFJbEIsS0FBSyxDQUFDbUIsYUFBTixDQUFvQkYsSUFBcEIsS0FBNkJqQixLQUFLLENBQUNvQixPQUFOLENBQWNILElBQWQsQ0FBakMsRUFBc0Q7TUFDcEQsSUFBSVgsS0FBSyxDQUFDZSxPQUFOLENBQWNKLElBQWQsTUFBd0IsQ0FBQyxDQUE3QixFQUFnQztRQUM5QixNQUFNSyxLQUFLLENBQUMsb0NBQW9DSixTQUFyQyxDQUFYO01BQ0Q7O01BRURaLEtBQUssQ0FBQ2lCLElBQU4sQ0FBV04sSUFBWDtNQUVBakIsS0FBSyxDQUFDd0IsT0FBTixDQUFjUCxJQUFkLEVBQW9CLFNBQVNRLElBQVQsQ0FBY2pCLEtBQWQsRUFBcUJrQixHQUFyQixFQUEwQjtRQUM1QyxJQUFJMUIsS0FBSyxDQUFDMkIsV0FBTixDQUFrQm5CLEtBQWxCLENBQUosRUFBOEI7UUFDOUIsSUFBSW9CLE9BQU8sR0FBR1YsU0FBUyxHQUFHQSxTQUFTLEdBQUcsR0FBWixHQUFrQlEsR0FBckIsR0FBMkJBLEdBQWxEO1FBQ0EsSUFBSUcsR0FBSjs7UUFFQSxJQUFJckIsS0FBSyxJQUFJLENBQUNVLFNBQVYsSUFBdUIsT0FBT1YsS0FBUCxLQUFpQixRQUE1QyxFQUFzRDtVQUNwRCxJQUFJUixLQUFLLENBQUM4QixRQUFOLENBQWVKLEdBQWYsRUFBb0IsSUFBcEIsQ0FBSixFQUErQjtZQUU3QmxCLEtBQUssR0FBR3VCLElBQUksQ0FBQ0MsU0FBTCxDQUFleEIsS0FBZixDQUFSO1VBQ0QsQ0FIRCxNQUdPLElBQUlSLEtBQUssQ0FBQzhCLFFBQU4sQ0FBZUosR0FBZixFQUFvQixJQUFwQixNQUE4QkcsR0FBRyxHQUFHN0IsS0FBSyxDQUFDaUMsT0FBTixDQUFjekIsS0FBZCxDQUFwQyxDQUFKLEVBQStEO1lBRXBFcUIsR0FBRyxDQUFDTCxPQUFKLENBQVksVUFBU1UsRUFBVCxFQUFhO2NBQ3ZCLENBQUNsQyxLQUFLLENBQUMyQixXQUFOLENBQWtCTyxFQUFsQixDQUFELElBQTBCOUIsUUFBUSxDQUFDK0IsTUFBVCxDQUFnQlAsT0FBaEIsRUFBeUJyQixZQUFZLENBQUMyQixFQUFELENBQXJDLENBQTFCO1lBQ0QsQ0FGRDtZQUdBO1VBQ0Q7UUFDRjs7UUFFRGxCLEtBQUssQ0FBQ1IsS0FBRCxFQUFRb0IsT0FBUixDQUFMO01BQ0QsQ0FuQkQ7TUFxQkF0QixLQUFLLENBQUM4QixHQUFOO0lBQ0QsQ0E3QkQsTUE2Qk87TUFDTGhDLFFBQVEsQ0FBQytCLE1BQVQsQ0FBZ0JqQixTQUFoQixFQUEyQlgsWUFBWSxDQUFDVSxJQUFELENBQXZDO0lBQ0Q7RUFDRjs7RUFFREQsS0FBSyxDQUFDYixHQUFELENBQUw7RUFFQSxPQUFPQyxRQUFQO0FBQ0Q7O0FBRURpQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJwQyxVQUFqQiJ9