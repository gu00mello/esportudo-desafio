b2502cfeddf1b1e7502329756323df3b
var fs = require('fs');

var path = require('path');

var os = require('os');

function log(message) {
  console.log("[dotenv][DEBUG] " + message);
}

var NEWLINE = '\n';
var RE_INI_KEY_VAL = /^\s*([\w.-]+)\s*=\s*(.*)?\s*$/;
var RE_NEWLINES = /\\n/g;
var NEWLINES_MATCH = /\r\n|\n|\r/;

function parse(src, options) {
  var debug = Boolean(options && options.debug);
  var obj = {};
  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {
    var keyValueArr = line.match(RE_INI_KEY_VAL);

    if (keyValueArr != null) {
      var key = keyValueArr[1];
      var val = keyValueArr[2] || '';
      var end = val.length - 1;
      var isDoubleQuoted = val[0] === '"' && val[end] === '"';
      var isSingleQuoted = val[0] === "'" && val[end] === "'";

      if (isSingleQuoted || isDoubleQuoted) {
        val = val.substring(1, end);

        if (isDoubleQuoted) {
          val = val.replace(RE_NEWLINES, NEWLINE);
        }
      } else {
        val = val.trim();
      }

      obj[key] = val;
    } else if (debug) {
      log("did not match key and value when parsing line " + (idx + 1) + ": " + line);
    }
  });
  return obj;
}

function resolveHome(envPath) {
  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath;
}

function config(options) {
  var dotenvPath = path.resolve(process.cwd(), '.env');
  var encoding = 'utf8';
  var debug = false;

  if (options) {
    if (options.path != null) {
      dotenvPath = resolveHome(options.path);
    }

    if (options.encoding != null) {
      encoding = options.encoding;
    }

    if (options.debug != null) {
      debug = true;
    }
  }

  try {
    var parsed = parse(fs.readFileSync(dotenvPath, {
      encoding: encoding
    }), {
      debug: debug
    });
    Object.keys(parsed).forEach(function (key) {
      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {
        process.env[key] = parsed[key];
      } else if (debug) {
        log("\"" + key + "\" is already defined in `process.env` and will not be overwritten");
      }
    });
    return {
      parsed: parsed
    };
  } catch (e) {
    return {
      error: e
    };
  }
}

module.exports.config = config;
module.exports.parse = parse;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,