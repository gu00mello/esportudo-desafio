cbcd94dd8609b3f894a490865f723b67
'use strict';

var androidScaleSuffix = {
  '0.75': 'ldpi',
  '1': 'mdpi',
  '1.5': 'hdpi',
  '2': 'xhdpi',
  '3': 'xxhdpi',
  '4': 'xxxhdpi'
};

function getAndroidAssetSuffix(scale) {
  if (scale.toString() in androidScaleSuffix) {
    return androidScaleSuffix[scale.toString()];
  }

  throw new Error('no such scale ' + scale.toString());
}

var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);

function getAndroidResourceFolderName(asset, scale) {
  if (!drawableFileTypes.has(asset.type)) {
    return 'raw';
  }

  var suffix = getAndroidAssetSuffix(scale);

  if (!suffix) {
    throw new Error("Don't know which android drawable suffix to use for scale: " + scale + '\nAsset: ' + JSON.stringify(asset, null, '\t') + '\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\t'));
  }

  return 'drawable-' + suffix;
}

function getAndroidResourceIdentifier(asset) {
  return (getBasePath(asset) + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
}

function getBasePath(asset) {
  var basePath = asset.httpServerLocation;
  return basePath.startsWith('/') ? basePath.substr(1) : basePath;
}

module.exports = {
  getAndroidResourceFolderName: getAndroidResourceFolderName,
  getAndroidResourceIdentifier: getAndroidResourceIdentifier,
  getBasePath: getBasePath
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhbmRyb2lkU2NhbGVTdWZmaXgiLCJnZXRBbmRyb2lkQXNzZXRTdWZmaXgiLCJzY2FsZSIsInRvU3RyaW5nIiwiRXJyb3IiLCJkcmF3YWJsZUZpbGVUeXBlcyIsIlNldCIsImdldEFuZHJvaWRSZXNvdXJjZUZvbGRlck5hbWUiLCJhc3NldCIsImhhcyIsInR5cGUiLCJzdWZmaXgiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllciIsImdldEJhc2VQYXRoIiwibmFtZSIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsImJhc2VQYXRoIiwiaHR0cFNlcnZlckxvY2F0aW9uIiwic3RhcnRzV2l0aCIsInN1YnN0ciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJwYXRoLXN1cHBvcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIHtQYWNrYWdlckFzc2V0fSBmcm9tICcuL3JlZ2lzdHJ5LmpzJztcblxuY29uc3QgYW5kcm9pZFNjYWxlU3VmZml4ID0ge1xuICAnMC43NSc6ICdsZHBpJyxcbiAgJzEnOiAnbWRwaScsXG4gICcxLjUnOiAnaGRwaScsXG4gICcyJzogJ3hoZHBpJyxcbiAgJzMnOiAneHhoZHBpJyxcbiAgJzQnOiAneHh4aGRwaScsXG59O1xuXG4vKipcbiAqIEZJWE1FOiB1c2luZyBudW1iZXIgdG8gcmVwcmVzZW50IGRpc2NyZXRlIHNjYWxlIG51bWJlcnMgaXMgZnJhZ2lsZSBpbiBlc3NlbmNlIGJlY2F1c2Ugb2ZcbiAqIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgaW1wcmVjaXNpb24uXG4gKi9cbmZ1bmN0aW9uIGdldEFuZHJvaWRBc3NldFN1ZmZpeChzY2FsZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgaWYgKHNjYWxlLnRvU3RyaW5nKCkgaW4gYW5kcm9pZFNjYWxlU3VmZml4KSB7XG4gICAgcmV0dXJuIGFuZHJvaWRTY2FsZVN1ZmZpeFtzY2FsZS50b1N0cmluZygpXTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcignbm8gc3VjaCBzY2FsZSAnICsgc2NhbGUudG9TdHJpbmcoKSk7XG59XG5cbi8vIFNlZSBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9ndWlkZS90b3BpY3MvcmVzb3VyY2VzL2RyYXdhYmxlLXJlc291cmNlLmh0bWxcbmNvbnN0IGRyYXdhYmxlRmlsZVR5cGVzID0gbmV3IFNldChbXG4gICdnaWYnLFxuICAnanBlZycsXG4gICdqcGcnLFxuICAncG5nJyxcbiAgJ3N2ZycsXG4gICd3ZWJwJyxcbiAgJ3htbCcsXG5dKTtcblxuZnVuY3Rpb24gZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZShcbiAgYXNzZXQ6IFBhY2thZ2VyQXNzZXQsXG4gIHNjYWxlOiBudW1iZXIsXG4pOiBzdHJpbmcgfCAkVEVNUE9SQVJZJHN0cmluZzwncmF3Jz4ge1xuICBpZiAoIWRyYXdhYmxlRmlsZVR5cGVzLmhhcyhhc3NldC50eXBlKSkge1xuICAgIHJldHVybiAncmF3JztcbiAgfVxuICBjb25zdCBzdWZmaXggPSBnZXRBbmRyb2lkQXNzZXRTdWZmaXgoc2NhbGUpO1xuICBpZiAoIXN1ZmZpeCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiRG9uJ3Qga25vdyB3aGljaCBhbmRyb2lkIGRyYXdhYmxlIHN1ZmZpeCB0byB1c2UgZm9yIHNjYWxlOiBcIiArXG4gICAgICAgIHNjYWxlICtcbiAgICAgICAgJ1xcbkFzc2V0OiAnICtcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoYXNzZXQsIG51bGwsICdcXHQnKSArXG4gICAgICAgICdcXG5Qb3NzaWJsZSBzY2FsZXMgYXJlOicgK1xuICAgICAgICBKU09OLnN0cmluZ2lmeShhbmRyb2lkU2NhbGVTdWZmaXgsIG51bGwsICdcXHQnKSxcbiAgICApO1xuICB9XG4gIHJldHVybiAnZHJhd2FibGUtJyArIHN1ZmZpeDtcbn1cblxuZnVuY3Rpb24gZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcihhc3NldDogUGFja2FnZXJBc3NldCk6IHN0cmluZyB7XG4gIHJldHVybiAoZ2V0QmFzZVBhdGgoYXNzZXQpICsgJy8nICsgYXNzZXQubmFtZSlcbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC5yZXBsYWNlKC9cXC8vZywgJ18nKSAvLyBFbmNvZGUgZm9sZGVyIHN0cnVjdHVyZSBpbiBmaWxlIG5hbWVcbiAgICAucmVwbGFjZSgvKFteYS16MC05X10pL2csICcnKSAvLyBSZW1vdmUgaWxsZWdhbCBjaGFyc1xuICAgIC5yZXBsYWNlKC9eYXNzZXRzXy8sICcnKTsgLy8gUmVtb3ZlIFwiYXNzZXRzX1wiIHByZWZpeFxufVxuXG5mdW5jdGlvbiBnZXRCYXNlUGF0aChhc3NldDogUGFja2FnZXJBc3NldCk6IHN0cmluZyB7XG4gIGNvbnN0IGJhc2VQYXRoID0gYXNzZXQuaHR0cFNlcnZlckxvY2F0aW9uO1xuICByZXR1cm4gYmFzZVBhdGguc3RhcnRzV2l0aCgnLycpID8gYmFzZVBhdGguc3Vic3RyKDEpIDogYmFzZVBhdGg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lLFxuICBnZXRBbmRyb2lkUmVzb3VyY2VJZGVudGlmaWVyLFxuICBnZXRCYXNlUGF0aCxcbn07XG4iXSwibWFwcGluZ3MiOiJBQVVBOztBQUlBLElBQU1BLGtCQUFrQixHQUFHO0VBQ3pCLFFBQVEsTUFEaUI7RUFFekIsS0FBSyxNQUZvQjtFQUd6QixPQUFPLE1BSGtCO0VBSXpCLEtBQUssT0FKb0I7RUFLekIsS0FBSyxRQUxvQjtFQU16QixLQUFLO0FBTm9CLENBQTNCOztBQWFBLFNBQVNDLHFCQUFULENBQStCQyxLQUEvQixFQUFzRDtFQUNwRCxJQUFJQSxLQUFLLENBQUNDLFFBQU4sTUFBb0JILGtCQUF4QixFQUE0QztJQUMxQyxPQUFPQSxrQkFBa0IsQ0FBQ0UsS0FBSyxDQUFDQyxRQUFOLEVBQUQsQ0FBekI7RUFDRDs7RUFFRCxNQUFNLElBQUlDLEtBQUosQ0FBVSxtQkFBbUJGLEtBQUssQ0FBQ0MsUUFBTixFQUE3QixDQUFOO0FBQ0Q7O0FBR0QsSUFBTUUsaUJBQWlCLEdBQUcsSUFBSUMsR0FBSixDQUFRLENBQ2hDLEtBRGdDLEVBRWhDLE1BRmdDLEVBR2hDLEtBSGdDLEVBSWhDLEtBSmdDLEVBS2hDLEtBTGdDLEVBTWhDLE1BTmdDLEVBT2hDLEtBUGdDLENBQVIsQ0FBMUI7O0FBVUEsU0FBU0MsNEJBQVQsQ0FDRUMsS0FERixFQUVFTixLQUZGLEVBR3FDO0VBQ25DLElBQUksQ0FBQ0csaUJBQWlCLENBQUNJLEdBQWxCLENBQXNCRCxLQUFLLENBQUNFLElBQTVCLENBQUwsRUFBd0M7SUFDdEMsT0FBTyxLQUFQO0VBQ0Q7O0VBQ0QsSUFBTUMsTUFBTSxHQUFHVixxQkFBcUIsQ0FBQ0MsS0FBRCxDQUFwQzs7RUFDQSxJQUFJLENBQUNTLE1BQUwsRUFBYTtJQUNYLE1BQU0sSUFBSVAsS0FBSixDQUNKLGdFQUNFRixLQURGLEdBRUUsV0FGRixHQUdFVSxJQUFJLENBQUNDLFNBQUwsQ0FBZUwsS0FBZixFQUFzQixJQUF0QixFQUE0QixJQUE1QixDQUhGLEdBSUUsd0JBSkYsR0FLRUksSUFBSSxDQUFDQyxTQUFMLENBQWViLGtCQUFmLEVBQW1DLElBQW5DLEVBQXlDLElBQXpDLENBTkUsQ0FBTjtFQVFEOztFQUNELE9BQU8sY0FBY1csTUFBckI7QUFDRDs7QUFFRCxTQUFTRyw0QkFBVCxDQUFzQ04sS0FBdEMsRUFBb0U7RUFDbEUsT0FBTyxDQUFDTyxXQUFXLENBQUNQLEtBQUQsQ0FBWCxHQUFxQixHQUFyQixHQUEyQkEsS0FBSyxDQUFDUSxJQUFsQyxFQUNKQyxXQURJLEdBRUpDLE9BRkksQ0FFSSxLQUZKLEVBRVcsR0FGWCxFQUdKQSxPQUhJLENBR0ksZUFISixFQUdxQixFQUhyQixFQUlKQSxPQUpJLENBSUksVUFKSixFQUlnQixFQUpoQixDQUFQO0FBS0Q7O0FBRUQsU0FBU0gsV0FBVCxDQUFxQlAsS0FBckIsRUFBbUQ7RUFDakQsSUFBTVcsUUFBUSxHQUFHWCxLQUFLLENBQUNZLGtCQUF2QjtFQUNBLE9BQU9ELFFBQVEsQ0FBQ0UsVUFBVCxDQUFvQixHQUFwQixJQUEyQkYsUUFBUSxDQUFDRyxNQUFULENBQWdCLENBQWhCLENBQTNCLEdBQWdESCxRQUF2RDtBQUNEOztBQUVESSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7RUFDZmpCLDRCQUE0QixFQUE1QkEsNEJBRGU7RUFFZk8sNEJBQTRCLEVBQTVCQSw0QkFGZTtFQUdmQyxXQUFXLEVBQVhBO0FBSGUsQ0FBakIifQ==