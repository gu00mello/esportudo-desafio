d4880804da5e687d6c10bf2bbb9c5325
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _require = require('fs'),
    readFileSync = _require.readFileSync;

var dotenv = require('dotenv');

function parseDotenvFile(path) {
  var verbose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var content;

  try {
    content = readFileSync(path);
  } catch (error) {
    if (verbose) {
      console.error('react-native-dotenv', error);
    }

    return {};
  }

  return dotenv.parse(content);
}

module.exports = function (_ref) {
  var t = _ref.types;
  return {
    name: 'dotenv-import',
    pre: function pre() {
      this.opts = Object.assign({
        envName: 'APP_ENV',
        moduleName: '@env',
        path: '.env',
        whitelist: null,
        blacklist: null,
        allowlist: null,
        blocklist: null,
        safe: false,
        allowUndefined: true,
        verbose: false
      }, this.opts);
      var babelMode = process.env[this.opts.envName] || undefined && undefined !== 'undefined' && undefined !== 'development' && undefined || "test" || 'development';

      if (this.opts.verbose) {
        console.log('dotenvMode', babelMode);
      }

      if (this.opts.safe) {
        var parsed = parseDotenvFile(this.opts.path, this.opts.verbose);
        var localParsed = parseDotenvFile(this.opts.path + '.local');
        var modeParsed = parseDotenvFile(this.opts.path + '.' + babelMode);
        var modeLocalParsed = parseDotenvFile(this.opts.path + '.' + babelMode + '.local');
        this.env = Object.assign(Object.assign(Object.assign(parsed, modeParsed), localParsed), modeLocalParsed);
        this.env.NODE_ENV = "test" || babelMode;
      } else {
        dotenv.config({
          path: this.opts.path + '.' + babelMode + '.local',
          silent: true
        });
        dotenv.config({
          path: this.opts.path + '.' + babelMode,
          silent: true
        });
        dotenv.config({
          path: this.opts.path + '.local',
          silent: true
        });
        dotenv.config({
          path: this.opts.path
        });
        this.env = process.env;
      }
    },
    visitor: {
      ImportDeclaration: function ImportDeclaration(path, _ref2) {
        var opts = _ref2.opts;

        if (path.node.source.value === opts.moduleName) {
          for (var _ref3 of path.node.specifiers.entries()) {
            var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);

            var idx = _ref4[0];
            var specifier = _ref4[1];

            if (specifier.type === 'ImportDefaultSpecifier') {
              throw path.get('specifiers')[idx].buildCodeFrameError('Default import is not supported');
            }

            if (specifier.type === 'ImportNamespaceSpecifier') {
              throw path.get('specifiers')[idx].buildCodeFrameError('Wildcard import is not supported');
            }

            if (specifier.imported && specifier.local) {
              var importedId = specifier.imported.name;
              var localId = specifier.local.name;

              if (Array.isArray(opts.allowlist) && !opts.allowlist.includes(importedId)) {
                throw path.get('specifiers')[idx].buildCodeFrameError("\"" + importedId + "\" was not present in allowlist");
              } else if (Array.isArray(opts.whitelist) && !opts.whitelist.includes(importedId)) {
                console.warn('[DEPRECATION WARNING] This option is will be deprecated soon. Use allowlist instead');
                throw path.get('specifiers')[idx].buildCodeFrameError("\"" + importedId + "\" was not whitelisted");
              }

              if (Array.isArray(opts.blocklist) && opts.blocklist.includes(importedId)) {
                throw path.get('specifiers')[idx].buildCodeFrameError("\"" + importedId + "\" was not present in blocklist");
              } else if (Array.isArray(opts.blacklist) && opts.blacklist.includes(importedId)) {
                console.warn('[DEPRECATION WARNING] This option is will be deprecated soon. Use blocklist instead');
                throw path.get('specifiers')[idx].buildCodeFrameError("\"" + importedId + "\" was blacklisted");
              }

              if (!opts.allowUndefined && !Object.prototype.hasOwnProperty.call(this.env, importedId)) {
                throw path.get('specifiers')[idx].buildCodeFrameError("\"" + importedId + "\" is not defined in " + opts.path);
              }

              var binding = path.scope.getBinding(localId);

              for (var refPath of binding.referencePaths) {
                refPath.replaceWith(t.valueToNode(this.env[importedId]));
              }
            }
          }

          path.remove();
        }
      },
      MemberExpression: function MemberExpression(path, _ref5) {
        var opts = _ref5.opts;

        if (path.get('object').matchesPattern('process.env')) {
          var key = path.toComputedKey();

          if (t.isStringLiteral(key)) {
            var importedId = key.value;
            var value = opts.env && importedId in opts.env ? opts.env[importedId] : process.env[importedId];
            path.replaceWith(t.valueToNode(value));
          }
        }
      }
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,