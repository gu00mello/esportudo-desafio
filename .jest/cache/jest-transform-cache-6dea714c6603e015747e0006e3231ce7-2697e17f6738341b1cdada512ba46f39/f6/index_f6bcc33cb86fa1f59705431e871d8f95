3b1455ccc4a1bbe9745ce04f76072de2
'use strict';

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

var _wrapNativeSuper2 = _interopRequireDefault2(require("@babel/runtime/helpers/wrapNativeSuper"));

var _asyncToGenerator2 = _interopRequireDefault2(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

Object.defineProperty(exports, '__esModule', {
  value: true
});
Object.defineProperty(exports, 'CallbackTestRunner', {
  enumerable: true,
  get: function get() {
    return _types.CallbackTestRunner;
  }
});
Object.defineProperty(exports, 'EmittingTestRunner', {
  enumerable: true,
  get: function get() {
    return _types.EmittingTestRunner;
  }
});
exports.default = void 0;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _emittery() {
  var data = _interopRequireDefault(require('emittery'));

  _emittery = function _emittery() {
    return data;
  };

  return data;
}

function _pLimit() {
  var data = _interopRequireDefault(require('p-limit'));

  _pLimit = function _pLimit() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _jestWorker() {
  var data = require('jest-worker');

  _jestWorker = function _jestWorker() {
    return data;
  };

  return data;
}

var _runTest = _interopRequireDefault(require('./runTest'));

var _types = require('./types');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _classPrivateMethodInitSpec(obj, privateSet) {
  _checkPrivateRedeclaration(obj, privateSet);

  privateSet.add(obj);
}

function _classPrivateFieldInitSpec(obj, privateMap, value) {
  _checkPrivateRedeclaration(obj, privateMap);

  privateMap.set(obj, value);
}

function _checkPrivateRedeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError('Cannot initialize the same private elements twice on an object');
  }
}

function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, 'get');

  return _classApplyDescriptorGet(receiver, descriptor);
}

function _classExtractFieldDescriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError('attempted to ' + action + ' private field on non-instance');
  }

  return privateMap.get(receiver);
}

function _classApplyDescriptorGet(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }

  return descriptor.value;
}

function _classPrivateMethodGet(receiver, privateSet, fn) {
  if (!privateSet.has(receiver)) {
    throw new TypeError('attempted to get private field on non-instance');
  }

  return fn;
}

var _eventEmitter = new WeakMap();

var _createInBandTestRun = new WeakSet();

var _createParallelTestRun = new WeakSet();

var TestRunner = function (_types$EmittingTestRu) {
  (0, _inherits2.default)(TestRunner, _types$EmittingTestRu);

  var _super = _createSuper(TestRunner);

  function TestRunner() {
    var _this;

    (0, _classCallCheck2.default)(this, TestRunner);

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(_args));

    _classPrivateMethodInitSpec((0, _assertThisInitialized2.default)(_this), _createParallelTestRun);

    _classPrivateMethodInitSpec((0, _assertThisInitialized2.default)(_this), _createInBandTestRun);

    _classPrivateFieldInitSpec((0, _assertThisInitialized2.default)(_this), _eventEmitter, {
      writable: true,
      value: new (_emittery().default)()
    });

    return _this;
  }

  (0, _createClass2.default)(TestRunner, [{
    key: "runTests",
    value: function () {
      var _runTests = (0, _asyncToGenerator2.default)(function* (tests, watcher, options) {
        return yield options.serial ? _classPrivateMethodGet(this, _createInBandTestRun, _createInBandTestRun2).call(this, tests, watcher) : _classPrivateMethodGet(this, _createParallelTestRun, _createParallelTestRun2).call(this, tests, watcher);
      });

      function runTests(_x, _x2, _x3) {
        return _runTests.apply(this, arguments);
      }

      return runTests;
    }()
  }, {
    key: "on",
    value: function on(eventName, listener) {
      return _classPrivateFieldGet(this, _eventEmitter).on(eventName, listener);
    }
  }]);
  return TestRunner;
}(_types.EmittingTestRunner);

exports.default = TestRunner;

function _createInBandTestRun2(_x4, _x5) {
  return _createInBandTestRun3.apply(this, arguments);
}

function _createInBandTestRun3() {
  _createInBandTestRun3 = (0, _asyncToGenerator2.default)(function* (tests, watcher) {
    var _this3 = this;

    undefined = '1';
    var mutex = (0, _pLimit().default)(1);
    return tests.reduce(function (promise, test) {
      return mutex(function () {
        return promise.then((0, _asyncToGenerator2.default)(function* () {
          if (watcher.isInterrupted()) {
            throw new CancelRun();
          }

          var sendMessageToJest = function sendMessageToJest(eventName, args) {
            return _classPrivateFieldGet(_this3, _eventEmitter).emit(eventName, (0, _jestUtil().deepCyclicCopy)(args, {
              keepPrototype: false
            }));
          };

          yield _classPrivateFieldGet(_this3, _eventEmitter).emit('test-file-start', [test]);
          return (0, _runTest.default)(test.path, _this3._globalConfig, test.context.config, test.context.resolver, _this3._context, sendMessageToJest);
        })).then(function (result) {
          return _classPrivateFieldGet(_this3, _eventEmitter).emit('test-file-success', [test, result]);
        }, function (error) {
          return _classPrivateFieldGet(_this3, _eventEmitter).emit('test-file-failure', [test, error]);
        });
      });
    }, Promise.resolve());
  });
  return _createInBandTestRun3.apply(this, arguments);
}

function _createParallelTestRun2(_x6, _x7) {
  return _createParallelTestRun3.apply(this, arguments);
}

function _createParallelTestRun3() {
  _createParallelTestRun3 = (0, _asyncToGenerator2.default)(function* (tests, watcher) {
    var _this4 = this;

    var resolvers = new Map();

    for (var test of tests) {
      if (!resolvers.has(test.context.config.id)) {
        resolvers.set(test.context.config.id, {
          config: test.context.config,
          serializableModuleMap: test.context.moduleMap.toJSON()
        });
      }
    }

    var worker = new (_jestWorker().Worker)(require.resolve('./testWorker'), {
      exposedMethods: ['worker'],
      forkOptions: {
        serialization: 'json',
        stdio: 'pipe'
      },
      maxRetries: 3,
      numWorkers: this._globalConfig.maxWorkers,
      setupArgs: [{
        serializableResolvers: Array.from(resolvers.values())
      }]
    });
    if (worker.getStdout()) worker.getStdout().pipe(process.stdout);
    if (worker.getStderr()) worker.getStderr().pipe(process.stderr);
    var mutex = (0, _pLimit().default)(this._globalConfig.maxWorkers);

    var runTestInWorker = function runTestInWorker(test) {
      return mutex((0, _asyncToGenerator2.default)(function* () {
        if (watcher.isInterrupted()) {
          return Promise.reject();
        }

        yield _classPrivateFieldGet(_this4, _eventEmitter).emit('test-file-start', [test]);
        var promise = worker.worker({
          config: test.context.config,
          context: Object.assign({}, _this4._context, {
            changedFiles: _this4._context.changedFiles && Array.from(_this4._context.changedFiles),
            sourcesRelatedToTestsInChangedFiles: _this4._context.sourcesRelatedToTestsInChangedFiles && Array.from(_this4._context.sourcesRelatedToTestsInChangedFiles)
          }),
          globalConfig: _this4._globalConfig,
          path: test.path
        });

        if (promise.UNSTABLE_onCustomMessage) {
          promise.UNSTABLE_onCustomMessage(function (_ref3) {
            var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
                event = _ref4[0],
                payload = _ref4[1];

            return _classPrivateFieldGet(_this4, _eventEmitter).emit(event, payload);
          });
        }

        return promise;
      }));
    };

    var onInterrupt = new Promise(function (_, reject) {
      watcher.on('change', function (state) {
        if (state.interrupted) {
          reject(new CancelRun());
        }
      });
    });
    var runAllTests = Promise.all(tests.map(function (test) {
      return runTestInWorker(test).then(function (result) {
        return _classPrivateFieldGet(_this4, _eventEmitter).emit('test-file-success', [test, result]);
      }, function (error) {
        return _classPrivateFieldGet(_this4, _eventEmitter).emit('test-file-failure', [test, error]);
      });
    }));

    var cleanup = function () {
      var _ref5 = (0, _asyncToGenerator2.default)(function* () {
        var _yield$worker$end = yield worker.end(),
            forceExited = _yield$worker$end.forceExited;

        if (forceExited) {
          console.error(_chalk().default.yellow('A worker process has failed to exit gracefully and has been force exited. ' + 'This is likely caused by tests leaking due to improper teardown. ' + 'Try running with --detectOpenHandles to find leaks. ' + 'Active timers can also cause this, ensure that .unref() was called on them.'));
        }
      });

      return function cleanup() {
        return _ref5.apply(this, arguments);
      };
    }();

    return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);
  });
  return _createParallelTestRun3.apply(this, arguments);
}

var CancelRun = function (_Error) {
  (0, _inherits2.default)(CancelRun, _Error);

  var _super2 = _createSuper(CancelRun);

  function CancelRun(message) {
    var _this2;

    (0, _classCallCheck2.default)(this, CancelRun);
    _this2 = _super2.call(this, message);
    _this2.name = 'CancelRun';
    return _this2;
  }

  return (0, _createClass2.default)(CancelRun);
}((0, _wrapNativeSuper2.default)(Error));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,