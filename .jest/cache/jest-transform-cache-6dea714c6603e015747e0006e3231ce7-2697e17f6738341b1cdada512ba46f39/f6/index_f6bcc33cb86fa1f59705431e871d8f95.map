{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","_types","CallbackTestRunner","EmittingTestRunner","default","_chalk","data","_interopRequireDefault","require","_emittery","_pLimit","_jestUtil","_jestWorker","_runTest","obj","__esModule","_classPrivateMethodInitSpec","privateSet","_checkPrivateRedeclaration","add","_classPrivateFieldInitSpec","privateMap","set","privateCollection","has","TypeError","_classPrivateFieldGet","receiver","descriptor","_classExtractFieldDescriptor","_classApplyDescriptorGet","action","call","_classPrivateMethodGet","fn","_eventEmitter","WeakMap","_createInBandTestRun","WeakSet","_createParallelTestRun","TestRunner","_args","writable","tests","watcher","options","serial","_createInBandTestRun2","_createParallelTestRun2","eventName","listener","on","mutex","reduce","promise","test","then","isInterrupted","CancelRun","sendMessageToJest","args","emit","deepCyclicCopy","keepPrototype","path","_globalConfig","context","config","resolver","_context","result","error","Promise","resolve","resolvers","Map","id","serializableModuleMap","moduleMap","toJSON","worker","Worker","exposedMethods","forkOptions","serialization","stdio","maxRetries","numWorkers","maxWorkers","setupArgs","serializableResolvers","Array","from","values","getStdout","pipe","process","stdout","getStderr","stderr","runTestInWorker","reject","changedFiles","sourcesRelatedToTestsInChangedFiles","globalConfig","UNSTABLE_onCustomMessage","event","payload","onInterrupt","_","state","interrupted","runAllTests","all","map","cleanup","end","forceExited","console","yellow","race","message","name","Error"],"sources":["index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'CallbackTestRunner', {\n  enumerable: true,\n  get: function () {\n    return _types.CallbackTestRunner;\n  }\n});\nObject.defineProperty(exports, 'EmittingTestRunner', {\n  enumerable: true,\n  get: function () {\n    return _types.EmittingTestRunner;\n  }\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _emittery() {\n  const data = _interopRequireDefault(require('emittery'));\n\n  _emittery = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _pLimit() {\n  const data = _interopRequireDefault(require('p-limit'));\n\n  _pLimit = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWorker() {\n  const data = require('jest-worker');\n\n  _jestWorker = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _runTest = _interopRequireDefault(require('./runTest'));\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _classPrivateMethodInitSpec(obj, privateSet) {\n  _checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}\n\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\n\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\n      'Cannot initialize the same private elements twice on an object'\n    );\n  }\n}\n\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, 'get');\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\n      'attempted to ' + action + ' private field on non-instance'\n    );\n  }\n  return privateMap.get(receiver);\n}\n\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\n\nfunction _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError('attempted to get private field on non-instance');\n  }\n  return fn;\n}\n\nvar _eventEmitter = /*#__PURE__*/ new WeakMap();\n\nvar _createInBandTestRun = /*#__PURE__*/ new WeakSet();\n\nvar _createParallelTestRun = /*#__PURE__*/ new WeakSet();\n\nclass TestRunner extends _types.EmittingTestRunner {\n  constructor(..._args) {\n    super(..._args);\n\n    _classPrivateMethodInitSpec(this, _createParallelTestRun);\n\n    _classPrivateMethodInitSpec(this, _createInBandTestRun);\n\n    _classPrivateFieldInitSpec(this, _eventEmitter, {\n      writable: true,\n      value: new (_emittery().default)()\n    });\n  }\n\n  async runTests(tests, watcher, options) {\n    return await (options.serial\n      ? _classPrivateMethodGet(\n          this,\n          _createInBandTestRun,\n          _createInBandTestRun2\n        ).call(this, tests, watcher)\n      : _classPrivateMethodGet(\n          this,\n          _createParallelTestRun,\n          _createParallelTestRun2\n        ).call(this, tests, watcher));\n  }\n\n  on(eventName, listener) {\n    return _classPrivateFieldGet(this, _eventEmitter).on(eventName, listener);\n  }\n}\n\nexports.default = TestRunner;\n\nasync function _createInBandTestRun2(tests, watcher) {\n  process.env.JEST_WORKER_ID = '1';\n  const mutex = (0, _pLimit().default)(1);\n  return tests.reduce(\n    (promise, test) =>\n      mutex(() =>\n        promise\n          .then(async () => {\n            if (watcher.isInterrupted()) {\n              throw new CancelRun();\n            } // `deepCyclicCopy` used here to avoid mem-leak\n\n            const sendMessageToJest = (eventName, args) =>\n              _classPrivateFieldGet(this, _eventEmitter).emit(\n                eventName,\n                (0, _jestUtil().deepCyclicCopy)(args, {\n                  keepPrototype: false\n                })\n              );\n\n            await _classPrivateFieldGet(this, _eventEmitter).emit(\n              'test-file-start',\n              [test]\n            );\n            return (0, _runTest.default)(\n              test.path,\n              this._globalConfig,\n              test.context.config,\n              test.context.resolver,\n              this._context,\n              sendMessageToJest\n            );\n          })\n          .then(\n            result =>\n              _classPrivateFieldGet(this, _eventEmitter).emit(\n                'test-file-success',\n                [test, result]\n              ),\n            error =>\n              _classPrivateFieldGet(this, _eventEmitter).emit(\n                'test-file-failure',\n                [test, error]\n              )\n          )\n      ),\n    Promise.resolve()\n  );\n}\n\nasync function _createParallelTestRun2(tests, watcher) {\n  const resolvers = new Map();\n\n  for (const test of tests) {\n    if (!resolvers.has(test.context.config.id)) {\n      resolvers.set(test.context.config.id, {\n        config: test.context.config,\n        serializableModuleMap: test.context.moduleMap.toJSON()\n      });\n    }\n  }\n\n  const worker = new (_jestWorker().Worker)(require.resolve('./testWorker'), {\n    exposedMethods: ['worker'],\n    // @ts-expect-error: option does not exist on the node 12 types\n    forkOptions: {\n      serialization: 'json',\n      stdio: 'pipe'\n    },\n    maxRetries: 3,\n    numWorkers: this._globalConfig.maxWorkers,\n    setupArgs: [\n      {\n        serializableResolvers: Array.from(resolvers.values())\n      }\n    ]\n  });\n  if (worker.getStdout()) worker.getStdout().pipe(process.stdout);\n  if (worker.getStderr()) worker.getStderr().pipe(process.stderr);\n  const mutex = (0, _pLimit().default)(this._globalConfig.maxWorkers); // Send test suites to workers continuously instead of all at once to track\n  // the start time of individual tests.\n\n  const runTestInWorker = test =>\n    mutex(async () => {\n      if (watcher.isInterrupted()) {\n        return Promise.reject();\n      }\n\n      await _classPrivateFieldGet(this, _eventEmitter).emit('test-file-start', [\n        test\n      ]);\n      const promise = worker.worker({\n        config: test.context.config,\n        context: {\n          ...this._context,\n          changedFiles:\n            this._context.changedFiles &&\n            Array.from(this._context.changedFiles),\n          sourcesRelatedToTestsInChangedFiles:\n            this._context.sourcesRelatedToTestsInChangedFiles &&\n            Array.from(this._context.sourcesRelatedToTestsInChangedFiles)\n        },\n        globalConfig: this._globalConfig,\n        path: test.path\n      });\n\n      if (promise.UNSTABLE_onCustomMessage) {\n        // TODO: Get appropriate type for `onCustomMessage`\n        promise.UNSTABLE_onCustomMessage(([event, payload]) =>\n          _classPrivateFieldGet(this, _eventEmitter).emit(event, payload)\n        );\n      }\n\n      return promise;\n    });\n\n  const onInterrupt = new Promise((_, reject) => {\n    watcher.on('change', state => {\n      if (state.interrupted) {\n        reject(new CancelRun());\n      }\n    });\n  });\n  const runAllTests = Promise.all(\n    tests.map(test =>\n      runTestInWorker(test).then(\n        result =>\n          _classPrivateFieldGet(this, _eventEmitter).emit('test-file-success', [\n            test,\n            result\n          ]),\n        error =>\n          _classPrivateFieldGet(this, _eventEmitter).emit('test-file-failure', [\n            test,\n            error\n          ])\n      )\n    )\n  );\n\n  const cleanup = async () => {\n    const {forceExited} = await worker.end();\n\n    if (forceExited) {\n      console.error(\n        _chalk().default.yellow(\n          'A worker process has failed to exit gracefully and has been force exited. ' +\n            'This is likely caused by tests leaking due to improper teardown. ' +\n            'Try running with --detectOpenHandles to find leaks. ' +\n            'Active timers can also cause this, ensure that .unref() was called on them.'\n        )\n      );\n    }\n  };\n\n  return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);\n}\n\nclass CancelRun extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'CancelRun';\n  }\n}\n"],"mappings":"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"}