118073888608a6049ef04d9a6e5e195a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);

  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }

  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var react_1 = __importStar(require("react"));

var react_native_1 = require("react-native");

var styles_1 = require("../Players/styles");

var Loading_1 = __importDefault(require("../../components/Loading"));

var Teams_1 = require("../../context/Teams");

var Teams = function Teams(_ref) {
  var navigation = _ref.navigation;

  var _ref2 = (0, Teams_1.useTeams)(),
      getTeams = _ref2.getTeams;

  var _ref3 = (0, react_1.useState)(true),
      _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
      loading = _ref4[0],
      setLoading = _ref4[1];

  var _ref5 = (0, react_1.useState)([]),
      _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
      teams = _ref6[0],
      setTeams = _ref6[1];

  (0, react_1.useEffect)(function () {
    getTeams().then(function (response) {
      if (response.status === 200) {
        setTeams(response.data.response);
        setLoading(false);
      } else setLoading(false);
    });
  }, []);
  return React.createElement(styles_1.StyledContainer, null, React.createElement(styles_1.StyledTeam, null, React.createElement(styles_1.StyledTableImage, {
    resizeMode: "contain",
    source: {
      uri: "https://media.api-sports.io/football/leagues/3.png"
    }
  }), React.createElement(styles_1.StyledTableContent, null, React.createElement(styles_1.StyledTableText, null, "You are viewing teams from"), React.createElement(styles_1.StyledTableTitle, null, "UEFA Europa League"), React.createElement(styles_1.StyledTableText, null, "Cup \u2022 World"))), React.createElement(styles_1.Hairline, null), loading ? React.createElement(Loading_1.default, {
    name: "Teams"
  }) : React.createElement(react_native_1.ScrollView, null, teams.map(function (team, index) {
    return React.createElement(styles_1.StyledTable, {
      key: index,
      identifier: index
    }, React.createElement(styles_1.StyledTableImage, {
      resizeMode: "contain",
      source: {
        uri: team.team.logo
      }
    }), React.createElement(styles_1.StyledTableContent, {
      width: "100%"
    }, React.createElement(styles_1.StyledTableTitle, null, team.team.name), React.createElement(styles_1.StyledTableText, null, team.team.country, " \u2022 ", team.venue.city)));
  })));
};

exports.default = Teams;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFVQTs7QUFDQTs7QUFFQSxJQUFNQSxLQUFLLEdBQUcsU0FBUkEsS0FBUSxPQUF3QjtFQUFBLElBQXJCQyxVQUFxQixRQUFyQkEsVUFBcUI7O0VBQ2xDLFlBQXFCLHVCQUFyQjtFQUFBLElBQVFDLFFBQVIsU0FBUUEsUUFBUjs7RUFFQSxZQUE4QixzQkFBUyxJQUFULENBQTlCO0VBQUE7RUFBQSxJQUFPQyxPQUFQO0VBQUEsSUFBZ0JDLFVBQWhCOztFQUNBLFlBQTBCLHNCQUFTLEVBQVQsQ0FBMUI7RUFBQTtFQUFBLElBQU9DLEtBQVA7RUFBQSxJQUFjQyxRQUFkOztFQUVBLHVCQUFVLFlBQUs7SUFDWEosUUFBUSxHQUFHSyxJQUFYLENBQWdCLGtCQUFRLEVBQUc7TUFDdkIsSUFBSUMsUUFBUSxDQUFDQyxNQUFULEtBQW9CLEdBQXhCLEVBQTZCO1FBQ3pCSCxRQUFRLENBQUNFLFFBQVEsQ0FBQ0UsSUFBVCxDQUFjRixRQUFmLENBQVI7UUFDQUosVUFBVSxDQUFDLEtBQUQsQ0FBVjtNQUNILENBSEQsTUFHT0EsVUFBVSxDQUFDLEtBQUQsQ0FBVjtJQUNWLENBTEQ7RUFNSCxDQVBELEVBT0csRUFQSDtFQVNBLE9BQ0ksb0JBQUMsUUFBRCxDQUFDLGVBQUQsUUFDSSxvQkFBQyxRQUFELENBQUMsVUFBRCxRQUNJLG9CQUFDLFFBQUQsQ0FBQyxnQkFBRDtJQUNJLFVBQVUsRUFBQyxTQURmO0lBRUksTUFBTSxFQUFFO01BQUVPLEdBQUcsRUFBRTtJQUFQO0VBRlosRUFESixFQUlJLG9CQUFDLFFBQUQsQ0FBQyxrQkFBRCxRQUNJLG9CQUFDLFFBQUQsQ0FBQyxlQUFELHFDQURKLEVBRUksb0JBQUMsUUFBRCxDQUFDLGdCQUFELDZCQUZKLEVBR0ksb0JBQUMsUUFBRCxDQUFDLGVBQUQsMkJBSEosQ0FKSixDQURKLEVBV0ksb0JBQUMsUUFBRCxDQUFDLFFBQUQsT0FYSixFQVlLUixPQUFPLEdBQUcsb0JBQUMsU0FBRCxDQUFDLE9BQUQ7SUFBUSxJQUFJLEVBQUM7RUFBYixFQUFILEdBQ0osb0JBQUMsY0FBRCxDQUFDLFVBQUQsUUFDS0UsS0FBSyxDQUFDTyxHQUFOLENBQVUsVUFBQ0MsSUFBRCxFQUFZQyxLQUFaLEVBQTZCO0lBQ3BDLE9BQU8sb0JBQUMsUUFBRCxDQUFDLFdBQUQ7TUFBYSxHQUFHLEVBQUVBLEtBQWxCO01BQXlCLFVBQVUsRUFBRUE7SUFBckMsR0FDSCxvQkFBQyxRQUFELENBQUMsZ0JBQUQ7TUFDSSxVQUFVLEVBQUMsU0FEZjtNQUVJLE1BQU0sRUFBRTtRQUFFSCxHQUFHLEVBQUVFLElBQUksQ0FBQ0EsSUFBTCxDQUFVRTtNQUFqQjtJQUZaLEVBREcsRUFJSCxvQkFBQyxRQUFELENBQUMsa0JBQUQ7TUFBb0IsS0FBSyxFQUFFO0lBQTNCLEdBQ0ksb0JBQUMsUUFBRCxDQUFDLGdCQUFELFFBQW1CRixJQUFJLENBQUNBLElBQUwsQ0FBVUcsSUFBN0IsQ0FESixFQUVJLG9CQUFDLFFBQUQsQ0FBQyxlQUFELFFBQWtCSCxJQUFJLENBQUNBLElBQUwsQ0FBVUksT0FBNUIsY0FBd0NKLElBQUksQ0FBQ0ssS0FBTCxDQUFXQyxJQUFuRCxDQUZKLENBSkcsQ0FBUDtFQVNILENBVkEsQ0FETCxDQWJSLENBREo7QUE2QkgsQ0E1Q0Q7O0FBOENBQyxrQkFBZXBCLEtBQWYiLCJuYW1lcyI6WyJUZWFtcyIsIm5hdmlnYXRpb24iLCJnZXRUZWFtcyIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwidGVhbXMiLCJzZXRUZWFtcyIsInRoZW4iLCJyZXNwb25zZSIsInN0YXR1cyIsImRhdGEiLCJ1cmkiLCJtYXAiLCJ0ZWFtIiwiaW5kZXgiLCJsb2dvIiwibmFtZSIsImNvdW50cnkiLCJ2ZW51ZSIsImNpdHkiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiRDpcXHByb2plY3RzXFxFc3BvcnR1ZG9cXHNyY1xcc2NyZWVuc1xcVGVhbXNcXGluZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBTY3JvbGxWaWV3IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IHtcclxuICAgIFN0eWxlZENvbnRhaW5lcixcclxuICAgIFN0eWxlZFRhYmxlLFxyXG4gICAgU3R5bGVkVGFibGVDb250ZW50LFxyXG4gICAgU3R5bGVkVGFibGVUaXRsZSxcclxuICAgIFN0eWxlZFRhYmxlSW1hZ2UsXHJcbiAgICBTdHlsZWRUYWJsZVRleHQsXHJcbiAgICBIYWlybGluZSxcclxuICAgIFN0eWxlZFRlYW1cclxufSBmcm9tICcuLi9QbGF5ZXJzL3N0eWxlcyc7XHJcbmltcG9ydCBMb2FkZXIgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvTG9hZGluZ1wiO1xyXG5pbXBvcnQgeyB1c2VUZWFtcyB9IGZyb20gXCIuLi8uLi9jb250ZXh0L1RlYW1zXCI7XHJcblxyXG5jb25zdCBUZWFtcyA9ICh7IG5hdmlnYXRpb24gfTogYW55KSA9PiB7XHJcbiAgICBjb25zdCB7IGdldFRlYW1zIH0gPSB1c2VUZWFtcygpO1xyXG5cclxuICAgIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xyXG4gICAgY29uc3QgW3RlYW1zLCBzZXRUZWFtc10gPSB1c2VTdGF0ZShbXSk7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBnZXRUZWFtcygpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgIHNldFRlYW1zKHJlc3BvbnNlLmRhdGEucmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBzZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgICAgICB9KVxyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFN0eWxlZENvbnRhaW5lcj5cclxuICAgICAgICAgICAgPFN0eWxlZFRlYW0+XHJcbiAgICAgICAgICAgICAgICA8U3R5bGVkVGFibGVJbWFnZVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZU1vZGU9XCJjb250YWluXCJcclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U9e3sgdXJpOiBcImh0dHBzOi8vbWVkaWEuYXBpLXNwb3J0cy5pby9mb290YmFsbC9sZWFndWVzLzMucG5nXCIgfX0gLz5cclxuICAgICAgICAgICAgICAgIDxTdHlsZWRUYWJsZUNvbnRlbnQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPFN0eWxlZFRhYmxlVGV4dD5Zb3UgYXJlIHZpZXdpbmcgdGVhbXMgZnJvbTwvU3R5bGVkVGFibGVUZXh0PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRUYWJsZVRpdGxlPlVFRkEgRXVyb3BhIExlYWd1ZTwvU3R5bGVkVGFibGVUaXRsZT5cclxuICAgICAgICAgICAgICAgICAgICA8U3R5bGVkVGFibGVUZXh0PkN1cCDigKIgV29ybGQ8L1N0eWxlZFRhYmxlVGV4dD5cclxuICAgICAgICAgICAgICAgIDwvU3R5bGVkVGFibGVDb250ZW50PlxyXG4gICAgICAgICAgICA8L1N0eWxlZFRlYW0+XHJcbiAgICAgICAgICAgIDxIYWlybGluZSAvPlxyXG4gICAgICAgICAgICB7bG9hZGluZyA/IDxMb2FkZXIgbmFtZT1cIlRlYW1zXCIgLz4gOlxyXG4gICAgICAgICAgICAgICAgPFNjcm9sbFZpZXc+XHJcbiAgICAgICAgICAgICAgICAgICAge3RlYW1zLm1hcCgodGVhbTogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8U3R5bGVkVGFibGUga2V5PXtpbmRleH0gaWRlbnRpZmllcj17aW5kZXh9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZFRhYmxlSW1hZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNpemVNb2RlPVwiY29udGFpblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlPXt7IHVyaTogdGVhbS50ZWFtLmxvZ28gfX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWRUYWJsZUNvbnRlbnQgd2lkdGg9e1wiMTAwJVwifT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkVGFibGVUaXRsZT57dGVhbS50ZWFtLm5hbWV9PC9TdHlsZWRUYWJsZVRpdGxlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWRUYWJsZVRleHQ+e3RlYW0udGVhbS5jb3VudHJ5fSDigKIge3RlYW0udmVudWUuY2l0eX08L1N0eWxlZFRhYmxlVGV4dD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvU3R5bGVkVGFibGVDb250ZW50PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0eWxlZFRhYmxlPlxyXG4gICAgICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICAgICAgPC9TY3JvbGxWaWV3Pn1cclxuICAgICAgICA8L1N0eWxlZENvbnRhaW5lcj5cclxuICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRlYW1zOyJdfQ==