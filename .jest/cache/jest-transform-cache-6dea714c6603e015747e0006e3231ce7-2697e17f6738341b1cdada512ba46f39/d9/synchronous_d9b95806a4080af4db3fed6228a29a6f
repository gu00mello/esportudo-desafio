9a4c6fa8daf939af78c1e21656f8b9e6
'use strict';

var Promise = require('./core.js');

module.exports = Promise;

Promise.enableSynchronous = function () {
  Promise.prototype.isPending = function () {
    return this.getState() == 0;
  };

  Promise.prototype.isFulfilled = function () {
    return this.getState() == 1;
  };

  Promise.prototype.isRejected = function () {
    return this.getState() == 2;
  };

  Promise.prototype.getValue = function () {
    if (this._V === 3) {
      return this._W.getValue();
    }

    if (!this.isFulfilled()) {
      throw new Error('Cannot get a value of an unfulfilled promise.');
    }

    return this._W;
  };

  Promise.prototype.getReason = function () {
    if (this._V === 3) {
      return this._W.getReason();
    }

    if (!this.isRejected()) {
      throw new Error('Cannot get a rejection reason of a non-rejected promise.');
    }

    return this._W;
  };

  Promise.prototype.getState = function () {
    if (this._V === 3) {
      return this._W.getState();
    }

    if (this._V === -1 || this._V === -2) {
      return 0;
    }

    return this._V;
  };
};

Promise.disableSynchronous = function () {
  Promise.prototype.isPending = undefined;
  Promise.prototype.isFulfilled = undefined;
  Promise.prototype.isRejected = undefined;
  Promise.prototype.getValue = undefined;
  Promise.prototype.getReason = undefined;
  Promise.prototype.getState = undefined;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9taXNlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJlbmFibGVTeW5jaHJvbm91cyIsInByb3RvdHlwZSIsImlzUGVuZGluZyIsImdldFN0YXRlIiwiaXNGdWxmaWxsZWQiLCJpc1JlamVjdGVkIiwiZ2V0VmFsdWUiLCJfViIsIl9XIiwiRXJyb3IiLCJnZXRSZWFzb24iLCJkaXNhYmxlU3luY2hyb25vdXMiLCJ1bmRlZmluZWQiXSwic291cmNlcyI6WyJzeW5jaHJvbm91cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBQcm9taXNlID0gcmVxdWlyZSgnLi9jb3JlLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTtcblByb21pc2UuZW5hYmxlU3luY2hyb25vdXMgPSBmdW5jdGlvbiAoKSB7XG4gIFByb21pc2UucHJvdG90eXBlLmlzUGVuZGluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0YXRlKCkgPT0gMDtcbiAgfTtcblxuICBQcm9taXNlLnByb3RvdHlwZS5pc0Z1bGZpbGxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0YXRlKCkgPT0gMTtcbiAgfTtcblxuICBQcm9taXNlLnByb3RvdHlwZS5pc1JlamVjdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGUoKSA9PSAyO1xuICB9O1xuXG4gIFByb21pc2UucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9WID09PSAzKSB7XG4gICAgICByZXR1cm4gdGhpcy5fVy5nZXRWYWx1ZSgpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBnZXQgYSB2YWx1ZSBvZiBhbiB1bmZ1bGZpbGxlZCBwcm9taXNlLicpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9XO1xuICB9O1xuXG4gIFByb21pc2UucHJvdG90eXBlLmdldFJlYXNvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fViA9PT0gMykge1xuICAgICAgcmV0dXJuIHRoaXMuX1cuZ2V0UmVhc29uKCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzUmVqZWN0ZWQoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZ2V0IGEgcmVqZWN0aW9uIHJlYXNvbiBvZiBhIG5vbi1yZWplY3RlZCBwcm9taXNlLicpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9XO1xuICB9O1xuXG4gIFByb21pc2UucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9WID09PSAzKSB7XG4gICAgICByZXR1cm4gdGhpcy5fVy5nZXRTdGF0ZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fViA9PT0gLTEgfHwgdGhpcy5fViA9PT0gLTIpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9WO1xuICB9O1xufTtcblxuUHJvbWlzZS5kaXNhYmxlU3luY2hyb25vdXMgPSBmdW5jdGlvbigpIHtcbiAgUHJvbWlzZS5wcm90b3R5cGUuaXNQZW5kaW5nID0gdW5kZWZpbmVkO1xuICBQcm9taXNlLnByb3RvdHlwZS5pc0Z1bGZpbGxlZCA9IHVuZGVmaW5lZDtcbiAgUHJvbWlzZS5wcm90b3R5cGUuaXNSZWplY3RlZCA9IHVuZGVmaW5lZDtcbiAgUHJvbWlzZS5wcm90b3R5cGUuZ2V0VmFsdWUgPSB1bmRlZmluZWQ7XG4gIFByb21pc2UucHJvdG90eXBlLmdldFJlYXNvbiA9IHVuZGVmaW5lZDtcbiAgUHJvbWlzZS5wcm90b3R5cGUuZ2V0U3RhdGUgPSB1bmRlZmluZWQ7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJILE9BQWpCOztBQUNBQSxPQUFPLENBQUNJLGlCQUFSLEdBQTRCLFlBQVk7RUFDdENKLE9BQU8sQ0FBQ0ssU0FBUixDQUFrQkMsU0FBbEIsR0FBOEIsWUFBVztJQUN2QyxPQUFPLEtBQUtDLFFBQUwsTUFBbUIsQ0FBMUI7RUFDRCxDQUZEOztFQUlBUCxPQUFPLENBQUNLLFNBQVIsQ0FBa0JHLFdBQWxCLEdBQWdDLFlBQVc7SUFDekMsT0FBTyxLQUFLRCxRQUFMLE1BQW1CLENBQTFCO0VBQ0QsQ0FGRDs7RUFJQVAsT0FBTyxDQUFDSyxTQUFSLENBQWtCSSxVQUFsQixHQUErQixZQUFXO0lBQ3hDLE9BQU8sS0FBS0YsUUFBTCxNQUFtQixDQUExQjtFQUNELENBRkQ7O0VBSUFQLE9BQU8sQ0FBQ0ssU0FBUixDQUFrQkssUUFBbEIsR0FBNkIsWUFBWTtJQUN2QyxJQUFJLEtBQUtDLEVBQUwsS0FBWSxDQUFoQixFQUFtQjtNQUNqQixPQUFPLEtBQUtDLEVBQUwsQ0FBUUYsUUFBUixFQUFQO0lBQ0Q7O0lBRUQsSUFBSSxDQUFDLEtBQUtGLFdBQUwsRUFBTCxFQUF5QjtNQUN2QixNQUFNLElBQUlLLEtBQUosQ0FBVSwrQ0FBVixDQUFOO0lBQ0Q7O0lBRUQsT0FBTyxLQUFLRCxFQUFaO0VBQ0QsQ0FWRDs7RUFZQVosT0FBTyxDQUFDSyxTQUFSLENBQWtCUyxTQUFsQixHQUE4QixZQUFZO0lBQ3hDLElBQUksS0FBS0gsRUFBTCxLQUFZLENBQWhCLEVBQW1CO01BQ2pCLE9BQU8sS0FBS0MsRUFBTCxDQUFRRSxTQUFSLEVBQVA7SUFDRDs7SUFFRCxJQUFJLENBQUMsS0FBS0wsVUFBTCxFQUFMLEVBQXdCO01BQ3RCLE1BQU0sSUFBSUksS0FBSixDQUFVLDBEQUFWLENBQU47SUFDRDs7SUFFRCxPQUFPLEtBQUtELEVBQVo7RUFDRCxDQVZEOztFQVlBWixPQUFPLENBQUNLLFNBQVIsQ0FBa0JFLFFBQWxCLEdBQTZCLFlBQVk7SUFDdkMsSUFBSSxLQUFLSSxFQUFMLEtBQVksQ0FBaEIsRUFBbUI7TUFDakIsT0FBTyxLQUFLQyxFQUFMLENBQVFMLFFBQVIsRUFBUDtJQUNEOztJQUNELElBQUksS0FBS0ksRUFBTCxLQUFZLENBQUMsQ0FBYixJQUFrQixLQUFLQSxFQUFMLEtBQVksQ0FBQyxDQUFuQyxFQUFzQztNQUNwQyxPQUFPLENBQVA7SUFDRDs7SUFFRCxPQUFPLEtBQUtBLEVBQVo7RUFDRCxDQVREO0FBVUQsQ0EvQ0Q7O0FBaURBWCxPQUFPLENBQUNlLGtCQUFSLEdBQTZCLFlBQVc7RUFDdENmLE9BQU8sQ0FBQ0ssU0FBUixDQUFrQkMsU0FBbEIsR0FBOEJVLFNBQTlCO0VBQ0FoQixPQUFPLENBQUNLLFNBQVIsQ0FBa0JHLFdBQWxCLEdBQWdDUSxTQUFoQztFQUNBaEIsT0FBTyxDQUFDSyxTQUFSLENBQWtCSSxVQUFsQixHQUErQk8sU0FBL0I7RUFDQWhCLE9BQU8sQ0FBQ0ssU0FBUixDQUFrQkssUUFBbEIsR0FBNkJNLFNBQTdCO0VBQ0FoQixPQUFPLENBQUNLLFNBQVIsQ0FBa0JTLFNBQWxCLEdBQThCRSxTQUE5QjtFQUNBaEIsT0FBTyxDQUFDSyxTQUFSLENBQWtCRSxRQUFsQixHQUE2QlMsU0FBN0I7QUFDRCxDQVBEIn0=