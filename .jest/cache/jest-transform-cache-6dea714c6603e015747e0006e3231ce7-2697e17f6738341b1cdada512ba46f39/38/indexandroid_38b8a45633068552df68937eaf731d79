3b6e84bac62cee674c0adccfaacdad2c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _common = _interopRequireDefault(require("./common"));

var _excluded = ["children", "colors", "end", "locations", "useAngle", "angleCenter", "angle", "start", "style"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var convertPoint = function convertPoint(name, point) {
  if (Array.isArray(point)) {
    console.warn("LinearGradient '" + name + "' property should be an object with fields 'x' and 'y', " + 'Array type is deprecated.');
  }

  if (point !== null && typeof point === 'object') {
    return [point.x, point.y];
  }

  return point;
};

var validNumber = function validNumber(defaultValue) {
  return function (value) {
    return typeof value === 'number' ? value : defaultValue;
  };
};

var LinearGradient = function (_Component) {
  (0, _inherits2.default)(LinearGradient, _Component);

  var _super = _createSuper(LinearGradient);

  function LinearGradient() {
    (0, _classCallCheck2.default)(this, LinearGradient);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(LinearGradient, [{
    key: "setNativeProps",
    value: function setNativeProps(props) {
      this.gradientRef.setNativeProps(props);
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          children = _this$props.children,
          colors = _this$props.colors,
          end = _this$props.end,
          locations = _this$props.locations,
          useAngle = _this$props.useAngle,
          angleCenter = _this$props.angleCenter,
          angle = _this$props.angle,
          start = _this$props.start,
          style = _this$props.style,
          otherProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);

      if (colors && locations && colors.length !== locations.length) {
        console.warn('LinearGradient colors and locations props should be arrays of the same length');
      }

      var flatStyle = _reactNative.StyleSheet.flatten(style) || {};
      var borderRadius = flatStyle.borderRadius || 0;
      var validRadius = validNumber(borderRadius);
      var borderRadiiPerCorner = [validRadius(flatStyle.borderTopLeftRadius), validRadius(flatStyle.borderTopLeftRadius), validRadius(flatStyle.borderTopRightRadius), validRadius(flatStyle.borderTopRightRadius), validRadius(flatStyle.borderBottomRightRadius), validRadius(flatStyle.borderBottomRightRadius), validRadius(flatStyle.borderBottomLeftRadius), validRadius(flatStyle.borderBottomLeftRadius)];
      return _react.default.createElement(_reactNative.View, (0, _extends2.default)({
        ref: function ref(component) {
          _this.gradientRef = component;
        }
      }, otherProps, {
        style: style
      }), _react.default.createElement(_common.default, {
        style: {
          position: 'absolute',
          top: 0,
          left: 0,
          bottom: 0,
          right: 0
        },
        colors: colors.map(_reactNative.processColor),
        startPoint: convertPoint('start', start),
        endPoint: convertPoint('end', end),
        locations: locations ? locations.slice(0, colors.length) : null,
        useAngle: useAngle,
        angleCenter: convertPoint('angleCenter', angleCenter),
        angle: angle,
        borderRadii: borderRadiiPerCorner
      }), children);
    }
  }]);
  return LinearGradient;
}(_react.Component);

exports.default = LinearGradient;
LinearGradient.defaultProps = {
  start: {
    x: 0.5,
    y: 0.0
  },
  end: {
    x: 0.5,
    y: 1.0
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,